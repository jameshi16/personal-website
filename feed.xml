<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://codingindex.xyz/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codingindex.xyz/" rel="alternate" type="text/html" /><updated>2020-12-03T16:54:22+00:00</updated><id>https://codingindex.xyz/feed.xml</id><title type="html">CodingIndex’s Random Shenanigans</title><subtitle>A (human) index that likes to code. Also drinks way too much coffee.</subtitle><author><name>James</name></author><entry><title type="html">Moving from Travis-CI to GitHub Actions</title><link href="https://codingindex.xyz/2020/11/15/moving-from-travis-to-github-actions/" rel="alternate" type="text/html" title="Moving from Travis-CI to GitHub Actions" /><published>2020-11-15T00:30:00+00:00</published><updated>2020-11-15T00:30:00+00:00</updated><id>https://codingindex.xyz/2020/11/15/moving-from-travis-to-github-actions</id><content type="html" xml:base="https://codingindex.xyz/2020/11/15/moving-from-travis-to-github-actions/">&lt;h1 id=&quot;why-the-move&quot;&gt;Why the move?&lt;/h1&gt;

&lt;p&gt;In case you weren’t aware, the guys &lt;em&gt;now&lt;/em&gt; in charge of Travis CI recently &lt;a href=&quot;https://www.theregister.com/2020/11/02/travis_ci_pricng/&quot;&gt;changed how their “free” plan worked&lt;/a&gt;. TL;DR: Open-source Travis CI is no longer fully free - instead, you will now be allocated limited amount of credits, which will get you 1,000 minutes on a Linux machine before you are forced to purchase a plan. Applying for additional free credits will be on a case-by-case basis.&lt;/p&gt;

&lt;p&gt;Putting aside my own personal thoughts on the matter, my personal website takes anywhere from 33 seconds to 4 minutes to compile depending on cache status. This means that I can only post 400 more blog posts before I run out of credits. Hence, I needed to find another way to build and deploy my website.&lt;/p&gt;

&lt;p&gt;Over the years, GitHub has evolved from being just another place for developers to dump their code, to a fuller suite of tools developers can use to create CI/CD pipelines from the code they create. I believe that this is a result of market demand, as a way to be competitive against platforms such as GitLab. GitHub’s offering, GitHub Actions, is another way to interact with code, issues, and pull requests without using web hooks or APIs.&lt;/p&gt;

&lt;p&gt;As a lone maintainer of my personal blog, I find it too cumbersome to submit an application to either GitLab or Travis CI to gain their open-source offerings for free CI runner minutes. Under GitHub Action’s pricing plans, public projects get to use GitHub Actions for free. There is no application process or a need to attach a credit card to your GitHub account - you just configure the right files, push them to the repository, and GitHub Actions will automatically kick into action. Furthermore, my blog is hosted on GitHub Pages, and the &lt;a href=&quot;https://github.com/jameshi16/personal-website&quot;&gt;source code&lt;/a&gt; for it is also hosted on GitHub. Hence, GitHub actions was the most relevant choice of a CI/CD runner for me.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For those of you who have used Jekyll with GitHub pages before, possibly from &lt;a href=&quot;https://github.com/github/personal-website&quot;&gt;forking this repository&lt;/a&gt;, you’d know that the GitHub Pages environment can actually directly deploy Jekyll websites. However, as mentioned in &lt;a href=&quot;https://jekyllrb.com/docs/github-pages/#the-github-pages-gem&quot;&gt;this documentation by Jekyll&lt;/a&gt;, this only works with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-pages&lt;/code&gt; gem. I personally use other gems, and hence I need a CI/CD runner to build and deploy my website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;how-i-moved&quot;&gt;How I moved&lt;/h1&gt;

&lt;p&gt;I snooped around my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; and listed out the steps it took to build and deploy my website:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get a Ruby &amp;amp; Bundler environment&lt;/li&gt;
  &lt;li&gt;Install all the Gems listed in Gemfile or obtain them from the cache&lt;/li&gt;
  &lt;li&gt;Build the site&lt;/li&gt;
  &lt;li&gt;Deploy by pushing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On Travis-CI, there are certain “magical” elements that abstracts away some elements of CI/CD. Hence, translating to GitHub Actions steps, the full list of steps would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pull (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--depth=1&lt;/code&gt;) the website repository on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;Pull (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--depth=1&lt;/code&gt;) the website repository on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;Get a Ruby &amp;amp; Bundler environment&lt;/li&gt;
  &lt;li&gt;Install all the Gems listed in Gemfile or obtain them from the cache&lt;/li&gt;
  &lt;li&gt;Build the site&lt;/li&gt;
  &lt;li&gt;Copy/Move the built site to the repository on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;Deploy by pushing to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Defining the order of “steps” is essentially what a GitHub Actions workflow does. Hence, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/main.yml&lt;/code&gt;, I listed out the steps in YAML format:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build &amp;amp; Deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;buildNdeploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout source&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;source&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;master'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout built branch&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;built&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gh-pages'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ruby environment&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby/setup-ruby@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.5&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Cache dependencies&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/cache@v2.1.3&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.workspace }}/source/vendor/bundle&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gem_dependencies&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install/Upgrade gems&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;cd ${{ github.workspace }}/source&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;bundle install --jobs=3 --retry=3 --path=${BUNDLE_PATH:-${{ github.workspace }}/source/vendor/bundle}&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;cd -&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build website&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;cd ${{ github.workspace }}/source&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;cd -&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Move built files to the built directory&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;(cd ./source/_site &amp;amp;&amp;amp; tar c .) | (cd ./built &amp;amp;&amp;amp; tar xf -)&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./source/.github/actions/pushToGithub&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.repository }}.git&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each “step” in a workflow could either run commands, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cd ./source/_site &amp;amp;&amp;amp; tar c .) | (cd ./built &amp;amp;&amp;amp; tar xf -)&lt;/code&gt; or an action, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions/checkout@v2&lt;/code&gt;. Steps are also capable of running in-repository actions, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./source/.github/actions/pushToGithub&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(cd ./source/_site &amp;amp;&amp;amp; tar c .) | (cd ./built &amp;amp;&amp;amp; tar xf -)&lt;/code&gt; is a way to &lt;em&gt;update&lt;/em&gt; files from one directory to another. The command is essentially piping the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar&lt;/code&gt; compressed version of all the files in one directory, then extracting that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar&lt;/code&gt; in another directory through a pipe. This piece of geek was found in &lt;a href=&quot;https://askubuntu.com/a/269818&quot;&gt;this StackOverflow post&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many GitHub actions available on the &lt;a href=&quot;https://github.com/marketplace&quot;&gt;GitHub marketplace&lt;/a&gt;, which you can use directly in your workflow. I decided to make my own, since pushing to Git wasn’t rocket science, and it would be a good refresher to create a GitHub Action.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;side-quest-creating-an-action-that-pushes-to-a-repository&quot;&gt;Side-quest: Creating an action that pushes to a repository&lt;/h2&gt;

&lt;p&gt;Being a GitHub Action, the CI/CD runner would already had temporary read/write permissions to my repository. Hence, all I really needed to do was to add files, add a commit message, and push to the correct repository.&lt;/p&gt;

&lt;p&gt;This is easily done with the following lines of bash:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deploy&quot;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For my setup, I’ve cloned the repository containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch to a subdirectory; furthermore, I wanted to customize the username and email used for the deployment, just for flair purposes. Hence, my bash script ended up looking like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;built
git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;CodingIndex Deploy&quot;&lt;/span&gt;
git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;deploy@codingindex.xyz&quot;&lt;/span&gt;
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deployment from GitHub runner&quot;&lt;/span&gt;
git push https://github.com/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPOSITORY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; gh-pages:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I placed this script in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/pushToGithub/action.sh&lt;/code&gt;, but it really shouldn’t matter where the script is, as long as the action’s path is specified correctly in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/main.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, I created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/pushToGithub/action.yml&lt;/code&gt;, so that GitHub recognizes the parent directory as a valid GitHub action:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GitHub'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Pushes&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Github'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Branch of the repository to push to&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Target repository&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;composite&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ github.action_path }}/action.sh&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{inputs.branch}}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;REPOSITORY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{inputs.repository}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The action accepts 2 inputs: the branch, and the repository. Truth to be told, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs.repository&lt;/code&gt; is not really needed, but I left that input just in case I decide to separate the repositories used for the source and the built version.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;And just like that, pushing the resultant files will build the website, cache the dependencies (leading to an extremely fast build later on), and deploy to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch where the GitHub Pages environment will pick up the new changes and update the website accordingly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201115_1.png&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a status badge&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a status badge | Source: Me&lt;/p&gt;

&lt;p&gt;The last step is to create a status badge for your workflow, and display it in your README proudly - for you are now a GitHub Actions warrior! Remember to delete all references to Travis CI from your repository settings (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhooks&lt;/code&gt;) and user account settings, if you plan to migrate away from Travis CI for all your repositories permanently.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It is sad that Travis CI has basically left the open source community in the dust. While their claims of user abuse might have some sort of validity, I believe that such abuse can be better handled; perhaps instead of giving everyone free one-time “trial” minutes, they should top up some credits every month. They could also limit how long a runner can run for by default for open-source projects - maybe instead of 120 minutes, give each runner 30 minutes, thereafter charge the user by credit per minute.&lt;/p&gt;

&lt;p&gt;To add salt to the wound, Travis CI’s pricing plans are exclusive from the credits that an account can have; in other words, you need to pay for concurrency and credits &lt;em&gt;separately&lt;/em&gt;. Interpret their &lt;a href=&quot;https://travis-ci.com/plans&quot;&gt;pricing plans&lt;/a&gt; as you will.&lt;/p&gt;

&lt;p&gt;Oh well. We’ll see where the winds take us.&lt;/p&gt;

&lt;p&gt;Happy coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="github" /><category term="actions" /><category term="pages" /><category term="website" /><category term="move" /><category term="cicd" /><summary type="html">Why the move?</summary></entry><entry><title type="html">I tried to make a game…</title><link href="https://codingindex.xyz/2020/10/06/failed-game/" rel="alternate" type="text/html" title="I tried to make a game…" /><published>2020-10-06T15:30:00+00:00</published><updated>2020-10-06T15:30:00+00:00</updated><id>https://codingindex.xyz/2020/10/06/failed-game</id><content type="html" xml:base="https://codingindex.xyz/2020/10/06/failed-game/">&lt;p&gt;Yo! It’s been a while.&lt;/p&gt;

&lt;p&gt;I’ve been falling into the &lt;a href=&quot;https://www.youtube.com/channel/UCJFZiqLMntJufDCHc6bQixg&quot;&gt;Hololive&lt;/a&gt; rabbit hole for a while now, going as far as to create one of my more “interesting” creations called &lt;a href=&quot;https://github.com/jameshi16/cursed_moonrunes&quot;&gt;匚ㄩ尺丂乇ᗪ 爪ㄖㄖ几尺ㄩ几乇丂&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Luckily for you, my readers, this shall not be the main point of discussion for this blog post. Instead, let’s talk about &lt;a href=&quot;https://github.com/jameshi16/failedgame&quot;&gt;FailedGame&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;failedgame&quot;&gt;FailedGame&lt;/h1&gt;

&lt;p&gt;For about a month, I worked on &lt;a href=&quot;https://github.com/jameshi16/failedgame&quot;&gt;FailedGame&lt;/a&gt;, which I planned to finish before a certain day in September.&lt;/p&gt;

&lt;p&gt;You see, it was going to be my friend’s, &lt;a href=&quot;https://modelconverge.xyz&quot;&gt;ModelConverge&lt;/a&gt;’s, birthday. Typically, you would buy the birthday person a material gift, like a card, or a letter, or something. However, I wanted my gift to be special - something made from my skills. Weeks ago, my friend created a faithful MIDI soundtrack of a song he liked, and excitedly got me to listen to it. That was when I got the idea to incorporate it into some sort of a birthday gift, where I eventually settled to make a game.&lt;/p&gt;

&lt;p&gt;Turns out, making a game was a lot harder than I thought. I made a few mistakes at the start of development that snowballed into huge issues that forced me to give up development of the project, and deliver nothing to my friend. Another possible cause could be my attempt at multi-tasking between watching Hololive streams while programming; I’m the type that must have silence to focus and get anything done.&lt;/p&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The plan&lt;/h2&gt;

&lt;p&gt;The game would be a 2D RPG, much like those you can create using tools like &lt;a href=&quot;https://www.rpgmakerweb.com/&quot;&gt;RPG Maker&lt;/a&gt;. I wanted the movement to emulate the old classic RPG movement, i.e. the character will always move in integral unit of tiles, i.e. I don’t want “precise movement”.&lt;/p&gt;

&lt;div class=&quot;d-flex flex-md-row flex-column flex-justify-center&quot;&gt;
&lt;div style=&quot;margin: 0 4px&quot;&gt;
&lt;img src=&quot;/images/20201006_1.gif&quot; style=&quot;max-width: 300px; width: 100%; margin: 4px auto; display: block&quot; alt=&quot;Precise movement&quot; /&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Precise Movement | Source: Me&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;margin: 0 4px&quot;&gt;
&lt;img src=&quot;/images/20201006_2.gif&quot; style=&quot;max-width: 300px; width: 100%; margin: 4px auto; display: block&quot; alt=&quot;Classic RPG movement&quot; /&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Classic RPG Movement | Source: Me&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Furthermore, I wanted the combat system to be as interactive as possible; meaning, no turn-based battle system. Something like this (low quality GIF warning):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_3.gif&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Cutting arrows then cutting skeletons&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Killing skeletons on the fly | Source: Me&lt;/p&gt;

&lt;p&gt;In terms of story, it was supposed to go like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Main character is returning home from work;&lt;/li&gt;
  &lt;li&gt;Main character enters the house, which is dark at first, then the lights are toggled, and surprise! Birthday cake on the table;&lt;/li&gt;
  &lt;li&gt;After some time, a ninja will appear and steal the cake;&lt;/li&gt;
  &lt;li&gt;Main character then chases the ninja to a forest, fighting hordes of Skeletons and Zombies through a maze;&lt;/li&gt;
  &lt;li&gt;Main character then fights the ninja, who reveals that he is an alter-ego of the main character’s personality;&lt;/li&gt;
  &lt;li&gt;Song made by friend plays, and an epic boss battle ensues.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, supposed to. The lack of a GIF here should imply that I didn’t get nearly as far.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;so-what-went-wrong&quot;&gt;So, what went wrong?&lt;/h2&gt;

&lt;p&gt;As mentioned before, most of the things that went wrong happened right at the start - I chose the wrong game framework to work with.&lt;/p&gt;

&lt;p&gt;To develop this game, I used the &lt;a href=&quot;https://phaser.io/&quot;&gt;Phaser 3&lt;/a&gt; game framework. Phaser 3 is an extremely powerful framework with an amazing physics engine, collision detection, resource management, texture management, and so on. It even has a fallback mechanism for rendering and hence works on almost any platform that supports a browser and JavaScript. Furthermore, it’s open-source and has an extensive API documentation, alongside a large community.&lt;/p&gt;

&lt;p&gt;“So…” I hear you ask. “What’s wrong with an extremely powerful game framework?”&lt;/p&gt;

&lt;p&gt;At the start, I had no doubt in my mind that Phaser would be sufficient for my needs, as it could practically do everything imaginable - however, problems came when I tried to &lt;em&gt;limit&lt;/em&gt; the vast capabilities of the Phaser framework. In other words, the issue does not lie in the game framework itself - the issue lies in what I was &lt;em&gt;trying&lt;/em&gt; to do.&lt;/p&gt;

&lt;p&gt;You see, in Phaser 3, you can create sprites and let them interact with the world via physics in a short amount of time: if you go through &lt;a href=&quot;https://phaser.io/tutorials/making-your-first-phaser-3-game&quot;&gt;their tutorial&lt;/a&gt;, you’d create a 2D platformer complete with ball physics, collision detection with the world, and a scoring system. From the surface, Phaser was a perfect fit, as I wanted my sprite to collide with certain tiles in the world, the world boundary and have particle physics when I cast spells; much like what is accomplished in the tutorial.&lt;/p&gt;

&lt;p&gt;Hence, I chose to use the physics engine that came with Phaser, and decided to make an Arcade (Phaser lingo for stuff-affected-by-physics) type game. And ho boy, did that create a plethora of problems for me.&lt;/p&gt;

&lt;h3 id=&quot;problem-1-setting-up-the-project&quot;&gt;Problem 1: Setting up the project&lt;/h3&gt;

&lt;p&gt;I &lt;em&gt;know&lt;/em&gt; that there is a &lt;a href=&quot;https://github.com/photonstorm/phaser3-project-template&quot;&gt;Phaser 3 Project Template&lt;/a&gt; for webpack setup. But, FailedGame was an educational project, so I decided to set it up mostly from scratch. This meant installing and configuring webpack, babel, and the relevant loaders required for the project. If you have looked at the source, you would realize that there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; file - that’s the work of the &lt;a href=&quot;https://webpack.js.org/plugins/html-webpack-plugin/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt;, which automatically generates one based on the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt;. &lt;em&gt;I did that&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Learning how to configure webpack and babel from scratch taught me to appreciate tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npx create-react-app&lt;/code&gt;; in the modern ecosystem of JavaScript frameworks, boilerplate configuration is time-consuming and aggravating. This &lt;a href=&quot;https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f&quot;&gt;post&lt;/a&gt; describes what needs to be in a typical JavaScript developer’s toolchain, how volatile knowledge is in the JavaScript world, and how annoying it feels to do something simple in JavaScript.&lt;/p&gt;

&lt;p&gt;If FailedGame wasn’t an educational project, the best option would have been to use the CDN version of Phaser 3, followed by using the Project Template, followed by doing… whatever I’ve done here.&lt;/p&gt;

&lt;p&gt;You can see the configurations I’ve created in the &lt;a href=&quot;https://github.com/jameshi16/failedgame&quot;&gt;repository&lt;/a&gt; - I’m sure there are many mistakes in the configuration, but I’ve tried separating the dev environment configuration and the production environment configuration, albiet by the difference of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline-source-map&lt;/code&gt; versus a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source-map&lt;/code&gt;. To understand why it is viable to include a source map in production, read &lt;a href=&quot;https://css-tricks.com/should-i-use-source-maps-in-production/&quot;&gt;this article&lt;/a&gt;; it boils down to “it’s easier to debug &amp;amp; find out where a problem is in production”.&lt;/p&gt;

&lt;h3 id=&quot;problem-2-sizes-mismatch&quot;&gt;Problem 2: Sizes mismatch&lt;/h3&gt;

&lt;p&gt;If you know me in real life, I failed art in Secondary School. I have an artistic score lower than absolute zero, which should be impossible but ¯\_(ツ)_/¯. This essentially means that I can’t make tilesheets, draw sprites, make projectiles, or even make music (I know nuts about music). Hence, I needed to find online resources, like &lt;a href=&quot;https://opengameart.org/&quot;&gt;OpenGameArt&lt;/a&gt;; you can find the exact tilesheets I used in the &lt;a href=&quot;https://github.com/jameshi16/failedgame&quot;&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An issue with crowd-sourcing is that sometimes, you get tilesheets that seem to practice individualism - they have different tile sizes, spacing, margin, etc. The disparity between these tilesheets should be rectified somehow, making the task seem like the data cleaning stage before feeding image inputs into a machine learning model. Furthermore, I obtained my sprites from a &lt;a href=&quot;http://gaurav.munjal.us/Universal-LPC-Spritesheet-Character-Generator/&quot;&gt;generator&lt;/a&gt; that spits out 64x64 sprites, a stark contrast from the typical tilesheet sizes of 16x16 per tile.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_4.png&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;My player character&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;My player character | Source: Me&lt;/p&gt;

&lt;p&gt;So, I wrote a &lt;a href=&quot;https://github.com/jameshi16/failedgame/blob/master/src/assets/imgs/16px_by_16px_1px_spacing.py&quot;&gt;Python script&lt;/a&gt; to standardize the format of all the tilesheets (luckily I only had two variants of tilesheets). To standardize the scaling between the sprites and the tilesheets, I had a few options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Scale the 64x64 sprite down to 32x32 pixels;&lt;/li&gt;
  &lt;li&gt;Scale 16x16 tilesheets up to 32x32 pixels;&lt;/li&gt;
  &lt;li&gt;Scale by transforming in the game.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The reason why I wanted the sprite size (intended: 32x32) to be larger than the tilesize (intended: 16x16) is because the sprite looks tiny compared to its environment if I scaled it down to 16x16 pixels.
&lt;img src=&quot;/images/20201006_5.png&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Tiny player&quot; /&gt;&lt;/p&gt;
  &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Tiny player | Source: Me&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I chose option 3 to avoid the effects of scaling artifacts, and make the game play nice with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Scene&lt;/code&gt;’s zooming functionality. In the end, sprites were effectively 32x32 pixels, tiles were effectively 16x16 pixels, with the camera zoomed in by 2.&lt;/p&gt;

&lt;h3 id=&quot;problem-3-resourcemanager&quot;&gt;Problem 3: ResourceManager&lt;/h3&gt;

&lt;p&gt;If you looked at the Git commit history, I tried making a resource maanger at one point, because I was concerned about memory usage. But after spending approximately 24 manhours on it, I gave up and decided to let Phaser take the wheel.&lt;/p&gt;

&lt;p&gt;The factors for consideration to drop &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ResourceManager&lt;/code&gt; were:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;My game was going to be small; all the resources loaded in memory together would definitely be less than 100MB;&lt;/li&gt;
  &lt;li&gt;I have no need to handle large levels, or many levels at once. Moreover, by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Scene&lt;/code&gt; correctly, scenes that are destroyed &lt;em&gt;probably&lt;/em&gt; also destroys any unused resources;&lt;/li&gt;
  &lt;li&gt;It was eating up a lot of time that I could have spent elsewhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell, bad decisions led to crazy amount of work with no visible benefits!&lt;/p&gt;

&lt;h3 id=&quot;problem-4-sprite-spawns-in-the-middle-of-two-tiles&quot;&gt;Problem 4: Sprite spawns in the middle of two tiles&lt;/h3&gt;

&lt;p&gt;If you recall from “Problem 2”, my sprites have a size of 32x32, while the tiles are 16x16. Hence, the sprite spawns like this on the tilemap by default:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_8.png&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Sprite in the middle of tiles&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Middle of two tiles | Source: Me&lt;/p&gt;

&lt;p&gt;To fix this problem, I shifted the origin point of the sprite in the code. Apparently, the origin point is defined as the fraction of the full width/height of one frame in the sprite. In other words:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_9.png&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;0.25 from x, and 0.125 from y&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Origin points | Source: Me&lt;/p&gt;

&lt;p&gt;Believe it or not, this took me a while to figure out, because I was trying to determine the origin points by visualizing it in my head. In hindsight, drawing a simple diagram like the above would have saved me lots of trouble.&lt;/p&gt;

&lt;h3 id=&quot;problem-5-discrete-movement&quot;&gt;Problem 5: Discrete movement&lt;/h3&gt;

&lt;p&gt;As one may recall, I wanted my sprite to have the “Classic RPG movement” feel.&lt;/p&gt;

&lt;p&gt;However, by default, you are expected to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Physics.Arcade.Sprite.setVelocity&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Physics.Arcade.Sprite.setAcceleration&lt;/code&gt; functions for anything related to movement. Our character hence moves in a continuous manner, and can stop at any arbitrary position. In other words, we see the following behaviour for movement:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_1.gif&quot; style=&quot;max-width: 300px; width: 100%; margin: 4px auto; display: block&quot; alt=&quot;Precise movement&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Character stops anywhere | Source: Me&lt;/p&gt;

&lt;p&gt;To implement the behaviour that I wanted, I had to snap the sprite to the correct tile &lt;em&gt;during&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;em&gt;after&lt;/em&gt; movement. One method I tried was to set the velocity of the sprite to a multiple of a tile’s length, and as soon as the input key is released, stop the sprite at the nearest multiple. This meant that I could define velocity in terms of tiles.&lt;/p&gt;

&lt;p&gt;When I implemented the solution, it seemed to have worked - however, as time progresses, the sprite drifts by a tiny bit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_6.gif&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Sprite drifting&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Sprite drifting | Source: Me&lt;/p&gt;

&lt;p&gt;The subsequent no-brainer fix is to try and “snap” the sprite to the tile at the end of every movement, but this occurs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_7.gif&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;???&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Sprite rubber-banding + extraneous movement | Source: Me&lt;/p&gt;

&lt;p&gt;The sprite sometimes experiences rubber-banding, and may walk an extra tile!&lt;/p&gt;

&lt;p&gt;Hence, I was forced to remove my reliance on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Physics.Arcade.Sprite.setVelocity&lt;/code&gt;, and instead used my own method to move the player. Here is how it works:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;When a direction input is received, a movement function is added to a map (the map key being a representation of the sprite);&lt;/li&gt;
  &lt;li&gt;Every call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; calls the relevant movement functions with the time delta (for me, this is every 16 milliseconds) since the last call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;In the movement function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Physics.Arcade.Sprite.setPosition&lt;/code&gt; will be used to move the player forward, based on the time step, desired velocity, and whether the change in position will go beyond the boundry of two tiles. If it does, the player is moved to the tile instead of beyond the tile;&lt;/li&gt;
  &lt;li&gt;In the absence of a direction input, the movement function removes itself from the map, stopping all movement.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find the implementation in &lt;a href=&quot;https://github.com/jameshi16/failedgame/blob/master/src/scripts/BaseScene.js#L222&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/scripts/BaseScene.js&lt;/code&gt;&lt;/a&gt;, which results in “smoother” tile-discrete movement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_2.gif&quot; style=&quot;max-width: 300px; width: 100%; margin: 4px auto; display: block&quot; alt=&quot;Classic RPG movement&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Classic RPG Movement | Source: Me&lt;/p&gt;

&lt;h3 id=&quot;problem-6-collision-detection&quot;&gt;Problem 6: Collision detection&lt;/h3&gt;

&lt;p&gt;Phaser is great at collision detection. One can define groups, which can collide with other physics objects or groups, and provides a nice functional interface to handle events emitted by the collision to, say, reduce the player’s HP. Typically, if I wasn’t trying to achieve “Classic RPG movement”, I could have just used Phaser’s collision detection.&lt;/p&gt;

&lt;p&gt;Why can’t I just use the built-in collision detection? Well, see for youself:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_10.gif&quot; style=&quot;max-width: 300px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Oh no, we're no longer discrete!&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;No longer discrete | Source: Me&lt;/p&gt;

&lt;p&gt;The sprite collides with the blocking tile, and moves &lt;em&gt;ever so slightly&lt;/em&gt; into the tile. This, plus my custom solution to detect movement, renders Phaser’s collision detection unusable. To fix this problem, I can either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Increase/decrease the size of the hitbox using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Physics.Arcade.Sprite.setSize&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Phaser.Physics.Arcade.Sprite.input.hitArea.setSize&lt;/code&gt;, but I didn’t do this);&lt;/li&gt;
  &lt;li&gt;Write my own collision routine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While setting the size of the hitbox did mitigate the issue somewhat, I didn’t want the hitbox to be at the position I set it to be (i.e. at the bottom), because I still wanted the sprite to receive arrow damage when skeletons headshot the sprite. Hence, I decided to write my own collision routine.&lt;/p&gt;

&lt;p&gt;I figured that in a game where all movement is discrete, it’ll be waste of resources to calculate hitbox intersections - instead, I decided to just check the tile before the sprite, in whichever direction the sprite is facing. So:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If a sprite is facing left, check if (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.x - TILESIZE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.y&lt;/code&gt;) has a blocking tile;&lt;/li&gt;
  &lt;li&gt;If a sprite is facing right, check if (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.x + TILESIZE&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.y&lt;/code&gt;) has a blocking tile;&lt;/li&gt;
  &lt;li&gt;If a sprite is facing up, check if (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.y - TILESIZE&lt;/code&gt;) has a blocking tile;&lt;/li&gt;
  &lt;li&gt;If a sprite is facing down, check if (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprite.y + TILESIZE&lt;/code&gt;) has a blocking tile.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A sub-problem I faced as I implemented my own collision detection was how co-ordinates are calculated by Phaser - which is wherever the origin point is. As you recall, the origin point is at the top-left of the sprite, meaning that I had to translate the co-ordinates to the bottom of the sprite before I could perform collision detection.&lt;/p&gt;

&lt;p&gt;After accounting for some annoying 1px-off errors, the result is proper collision detection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_11.gif&quot; style=&quot;max-width: 300px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Good moves!&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Good moves! | Source: Me&lt;/p&gt;

&lt;p&gt;With my own collision detection method with tiles, I could then use Phaser’s accurate collision detection with projectiles and other sprites by reducing the sprite hitbox to 16px by 32px. All clear :thumbsup:.&lt;/p&gt;

&lt;h3 id=&quot;problem-7-a-search-algorithm&quot;&gt;Problem 7: A* Search Algorithm&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.geeksforgeeks.org/a-search-algorithm/&quot;&gt;A* Search Algorithm&lt;/a&gt; is a graph-traversal algorithm that finds the optimal (based on heuristics) path to a destination point from a source point.&lt;/p&gt;

&lt;p&gt;When I first read about the A* Search Algorithm, I thought it had to be some kind of alien magical algorithm that could somehow find a path that avoids obstacles using complex mathematical equations that was way out of my league. Well, that was until I paused my Hololive stream and actually read what it was about, and how the algorithm worked.&lt;/p&gt;

&lt;p&gt;Turns out, it was way simpler than I thought; I implemented a version in Python relatively quickly. Essentially, the A* Search Algorithm calculates a score based on heuristics (which is just a distance function you choose based on your application) and distance from the source point for the eight squares around the point in question, starting from the source point. The algorithm then moves on the next point with the least score from the source point, and repeats the score calculation. It’s a little hard to describe with words, so here is a GIF:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_12.gif&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;A* Search Algorithm&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;A&amp;#42; Search Algorithm | Source: &lt;a href=&quot;https://stackoverflow.com/a/21908165&quot;&gt;Greg Jennings &amp;amp; qiao&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two list-like data structures are involved in the A* Search Algorithm, the open list (to be searched), and the closed list (already seached / blocked). These lists benefit the most from a heap with the score determining its position in the tree, where the lowest score is on top of the heap (i.e. min-heap). A heap can be implemented with a binary tree.&lt;/p&gt;

&lt;p&gt;Furthermore, there is a need to quickly obtain the existence of points within the two lists during the execution of the A* Search Algorithm; in a heap, searching for keys would have a time complexity of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;, which is not great. To mitigate this problem, we introduce a companion hash table, which has a search time complexity of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;. Hence, if I decided to use a heap + hash table, insertion would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(log n)&lt;/code&gt;, search would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;, deletion would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(log n)&lt;/code&gt;, and cancer would be cured.&lt;/p&gt;

&lt;p&gt;For some reason, I decided to go with a heap + binary search tree. Don’t ask me why, but that’s how I did it; I probably thought something along the lines of: they’re both binary trees, so why not :man_shrugging:. This meant that insertion is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(log n)&lt;/code&gt;, search is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(log n)&lt;/code&gt; and deletion is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(log n)&lt;/code&gt; at best - I reap what I sow!&lt;/p&gt;

&lt;p&gt;One last thing about the A* Search Algorithm and its applications: in typical games made by studios, map sizes are huge. Hence, it might not be wise to run the entire algorithm for every path-taking object in the game; instead, splicing the path after the first path search is a good idea. &lt;a href=&quot;http://theory.stanford.edu/~amitp/GameProgramming/MovingObstacles.html&quot;&gt;Here&lt;/a&gt; is an article that explains how to deal with moving obstacles effectively while consuming not-so-much CPU cycles every call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; with any graph search algorithm. As my game is small (and I need to get this done quickly), I decided to ignore optimizing the algorithm for larger maps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_13.gif&quot; style=&quot;max-width: 700px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Pathfinding ingame&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Pathfinding in-game | Source: Me&lt;/p&gt;

&lt;p&gt;The path-finding you see in the GIF also included logic for the skeleton to stand still after having line of sight with the player.&lt;/p&gt;

&lt;h3 id=&quot;problem-8-rendering-issues&quot;&gt;Problem 8: Rendering issues&lt;/h3&gt;

&lt;p&gt;Thinking that I’ve resolved most of the problems, I decided to make a new map that will actually be included in the game. After having a jolly-good time of mapping, I loaded it up in the game and saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_14.png&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Game glitch?&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;The tiles are glitching? | Source: Me&lt;/p&gt;

&lt;p&gt;In hindsight, the problem was very simple - but troubleshooting the problem as it occurred was a pain in the neck. I initially thought it was a tilesheet problem, so I examined the tilesheet on an image editor and didn’t find anything. Then, I changed the renderer to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CANVAS&lt;/code&gt; rending instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AUTO&lt;/code&gt; (which defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WEBGL&lt;/code&gt;). Then, I changed tilesheets, changed zoom settings, and rescaled things. None of these solutions worked.&lt;/p&gt;

&lt;p&gt;Giving up, I searched DuckDuckGo for “Tile glitch Phaser 3” and “Black gaps tile Phaser 3”, but found no solutions that worked. After several days of frustruation, I searched my problem on &lt;em&gt;Google&lt;/em&gt; instead, and no thanks to DuckDuckGo, I finally found leads. Of all the possible solutions, &lt;a href=&quot;https://www.html5gamedevs.com/topic/38035-zooming-with-tilemaps/&quot;&gt;this thread&lt;/a&gt; eventually led me to a solution that worked.&lt;/p&gt;

&lt;p&gt;The problem was known as tile-bleeding, and could be fixed by extruding the tiles on the tilesheet by 1 pixel. I would then read the tiles off the tilesheets as 16px by 16px tiles with 1px spacing and margin. The tool that was included in the forum thread didn’t install right for me (probably a missing package or something, I was running out of time to check), so I decided to write my own using the &lt;a href=&quot;https://pillow.readthedocs.io/en/stable/&quot;&gt;Pillow&lt;/a&gt; library. The &lt;a href=&quot;https://github.com/jameshi16/failedgame/blob/master/src/assets/imgs/16px_by_16px_tile_bleed.py&quot;&gt;code&lt;/a&gt; is available in the &lt;a href=&quot;https://github.com/jameshi16/failedgame&quot;&gt;FailedGame repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After importing the image, and updating the configuration on Tiled, the map editor, the result is a game with no rendering artifacts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20201006_15.png&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Yay, it's fixed&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Fixed | Source: Me&lt;/p&gt;

&lt;h3 id=&quot;problem-9-times-up&quot;&gt;Problem 9: Time’s up&lt;/h3&gt;

&lt;p&gt;And with that, I ran out of time to deliver the project to my friend. I congratulated him for being born, and asked for a few extra days - unfortunately, the purpose of the game was lost as the significant day passed.&lt;/p&gt;

&lt;p&gt;Hence, I decided to abandon the project. FailedGame had projectile parrying, skeleton slaying, skeleton shooting, collision detection, NPC pathfinding and an initial map. R.I.P FailedGame.&lt;/p&gt;

&lt;p&gt;This won’t be the first time I’m abandoning a project, neither will it be the last - I hope to eventually be capable of delivering projects at breakneck speeds, even if it involved 8 (or 9 if you include me watching Hololive streams like a addicted lunatic) apostles of time wasters. However, through the experience of developing the game, I’ve learned a lot - from setting up a webpack project from scratch, to various issues around using a tool &lt;em&gt;not&lt;/em&gt; designed for its purpose, to learning how to accept defeat and move on.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;What a ride! I hope the content of the blog post has been as engaging to you as it was for me to write - I paused my Hololive stream for this!&lt;/p&gt;

&lt;p&gt;If you would like to try your hand at making games that is &lt;em&gt;not&lt;/em&gt; a Classic JRPG, do give &lt;a href=&quot;https://photonstorm.github.io/phaser3-docs/index.html&quot;&gt;Phaser&lt;/a&gt; a try. It is a powerful game framework that’ll bootstrap your way to an awesome indie title! If you’re not looking to make a game, then I hope my takeaways for the A* Search Algorithm, and my setting up of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webpack&lt;/code&gt; project without a pre-configured template gave you some insights; although I do apologize for the quality of those insights, since it’s from a complete novice like me.&lt;/p&gt;

&lt;p&gt;Other than that, please subscribe to my RSS feeds! If you like anime, subscribe to the &lt;a href=&quot;/feed/anime.xml&quot;&gt;Anime RSS feed&lt;/a&gt;, if you like technical content, subscribe to the &lt;a href=&quot;/feed.xml&quot;&gt;main RSS feed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Until next time, Ciao!&lt;/p&gt;

&lt;p&gt;Happy coding&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="game" /><category term="game" /><category term="javascript" /><category term="phaser" /><summary type="html">Yo! It’s been a while.</summary></entry><entry><title type="html">TypeSound (Developer)</title><link href="https://codingindex.xyz/2020/08/20/typesound-dev/" rel="alternate" type="text/html" title="TypeSound (Developer)" /><published>2020-08-20T04:00:00+00:00</published><updated>2020-08-20T04:00:00+00:00</updated><id>https://codingindex.xyz/2020/08/20/typesound-dev</id><content type="html" xml:base="https://codingindex.xyz/2020/08/20/typesound-dev/">&lt;p&gt;This is the development commentary blog post for &lt;a href=&quot;https://github.com/jameshi16/TypeSound&quot;&gt;TypeSound&lt;/a&gt;, which outlines the decisions behind some of the components that make the project tick. To know more about the release of TypeSound and how to use it, refer to the &lt;a href=&quot;/2020/08/20/typesound&quot;&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unexpectedly, I had to make quite a number of decisions during this project, something I wanted to avoid doing when making a &lt;em&gt;meme&lt;/em&gt; tool like TypeSound. The main issues are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Choosing the right sound library;&lt;/li&gt;
  &lt;li&gt;Acquiring keyboard input;&lt;/li&gt;
  &lt;li&gt;Figuring out how to adjust playback rate on the fly;&lt;/li&gt;
  &lt;li&gt;Making the tool support future extensions; and&lt;/li&gt;
  &lt;li&gt;Writing meaningful unit tests.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;choosing-the-right-sound-library&quot;&gt;Choosing the right sound library&lt;/h1&gt;

&lt;p&gt;The whole point of &lt;em&gt;writing&lt;/em&gt; a meme tool is to take close to zero development time, but deliver functional results. Hence, Python and JavaScript were good candidates; although I decided to go with Python given how traumatized I was with JavaScript at work. Hence, I snooped around &lt;a href=&quot;https://pypi.org&quot;&gt;PyPi&lt;/a&gt;, I saw that there exists audio packages that fulfill the not-so-well-thought-out criteria of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It played music.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200820_1.gif&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Barack Obama Applause GIF&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Criteria fulfilled, we win. | Source: &lt;a href=&quot;https://giphy.com/gifs/obama-barack-obama-president-l4q8cJzGdR9J8w3hS&quot;&gt;Giphy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I actually got around to doing the project, I realized that I had more urgent criteria to consider:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It still needs to play music;&lt;/li&gt;
  &lt;li&gt;The library should be cross-platform as much as possible (i.e. not reliant on only 1 method of playback);&lt;/li&gt;
  &lt;li&gt;But also be able to adjust playback rate &lt;em&gt;on the fly&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Believe it or not, tuning the velocity at which music is projected to the ears of the listener is a much harder task than I initially thought. After all, the meme around Python was to just import the packages you need:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200820_6.jpg&quot; style=&quot;max-width: 300px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Meme about importing all functionality in Python&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;import TypeSound | Source: &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/6a59fw/import_essay/&quot;&gt;Reddit / somethingofthatilk.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I searched high and low for a package that can do this natively, including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://simpleaudio.readthedocs.io/en/latest/&quot;&gt;simpleaudio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://people.csail.mit.edu/hubert/pyaudio/docs/&quot;&gt;pyaudio&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/playsound/&quot;&gt;playsound&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://python-sounddevice.readthedocs.io/en/0.4.0/&quot;&gt;sounddevice&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.org/project/miniaudio/&quot;&gt;miniaudio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This essentially means that I had to do the on-the-fly playback adjustment manually, either through a callback, or through inheriting a class and providing a stream manually. Hence, the competition was essentially between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sounddevice&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniaudio&lt;/code&gt;, as they supported callbacks.&lt;/p&gt;

&lt;p&gt;Alas, I, a container maniac, was developing TypeSound from a container. I realized that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sounddevice&lt;/code&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PortAudio&lt;/code&gt; library, which directly uses ALSA, which means it required access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/snd&lt;/code&gt; files on my container. While I was happy to provide it, it failed the “cross-platform” requirement; I needed a library that can both use ALSA, and PulseAudio. This is a personal necessity because I still want to support the network connectivity that PulseAudio offers for another project called &lt;a href=&quot;/2019/09/04/desktop-in-lxd-containers&quot;&gt;ContainerTop&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h2 id=&quot;alsa-vs-pulseaudio&quot;&gt;ALSA vs PulseAudio&lt;/h2&gt;

  &lt;p&gt;The Advanced Linux Sound Architecture (ALSA) is essentially a layer on top of our sound devices, which is why playing music through ALSA would require that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/snd&lt;/code&gt; exist in my container filesystem. With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dmix&lt;/code&gt; extension (&lt;a href=&quot;https://superuser.com/a/144649&quot;&gt;information source&lt;/a&gt;), ALSA can mix sound from various applications and play it through a playback device, while it traditionally can only play sound from one application at a time.&lt;/p&gt;

  &lt;p&gt;PulseAudio is a layer on top of ALSA, which mixes and provides network connectivity. The network connectivity part of PulseAudio allows me to create things like &lt;a href=&quot;/2019/09/04/desktop-in-lxd-containers&quot;&gt;ContainerTop&lt;/a&gt; with absolutely no user mapping (a big deal for privacy &amp;amp; security).&lt;/p&gt;

  &lt;p&gt;Which is better? The answer is I don’t want to start a war, but I would like to support both.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence, only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniaudio&lt;/code&gt; remains. In C/C++, &lt;a href=&quot;https://github.com/dr-soft/miniaudio&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniaudio&lt;/code&gt;&lt;/a&gt; is an absolute beast of a single-header library, boasting the following impressive list of backends:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;WASAPI&lt;/li&gt;
  &lt;li&gt;DirectSound&lt;/li&gt;
  &lt;li&gt;WinMM&lt;/li&gt;
  &lt;li&gt;Core Audio (Apple)&lt;/li&gt;
  &lt;li&gt;ALSA&lt;/li&gt;
  &lt;li&gt;PulseAudio&lt;/li&gt;
  &lt;li&gt;JACK&lt;/li&gt;
  &lt;li&gt;sndio&lt;/li&gt;
  &lt;li&gt;audio&lt;/li&gt;
  &lt;li&gt;OSS&lt;/li&gt;
  &lt;li&gt;AAudio&lt;/li&gt;
  &lt;li&gt;OpenSL|ES&lt;/li&gt;
  &lt;li&gt;Web Audio&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sox&quot;&gt;sox&lt;/h2&gt;

&lt;p&gt;I know most music players out there have equalizers; they’re what behind concert-hall effects and bass-boosted audio effects you can enable in your music player. Hence, I looked for an audio manipulation library, and the best one I found was &lt;a href=&quot;http://sox.sourceforge.net/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially, I wanted to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; to also speed up the audio on-the-fly, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; did not provide that functionality; I could only speed up the whole audio track before playback, which is not so ideal. Thereafter, I left &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sox&lt;/code&gt; in TypeSound for a possible future feature involving an equalizer for music playback, if I get around to doing that.&lt;/p&gt;

&lt;p&gt;It should also be noted that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniaudio&lt;/code&gt;’s full set of features includes filters, which can change audio in most ways a normal equalizer can - unfortunately, at the time of writing, the &lt;a href=&quot;https://pypi.org/project/miniaudio/&quot;&gt;python package&lt;/a&gt; of miniaudio did not support filters.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;acquiring-keyboard-input&quot;&gt;Acquiring keyboard input&lt;/h1&gt;

&lt;p&gt;Short of being a keylogger by a simple logging routine, TypeSound needs to know when a user has activated buttons on their keyboard to calculate the key presses per second, or KPS for short.&lt;/p&gt;

&lt;p&gt;Sounds simple, right?&lt;/p&gt;

&lt;p&gt;It is simple, and PyPi once again pulls through with another package: the &lt;a href=&quot;https://pypi.org/project/keyboard/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyboard&lt;/code&gt; package&lt;/a&gt;. Want to know the unfortunate thing?&lt;/p&gt;

&lt;p&gt;On Linux, it requires access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/input/input*&lt;/code&gt;, which contains the raw device files - much like how I needed to forward &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/snd&lt;/code&gt; to my container for ALSA to work, I now need to forward &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/input/input*&lt;/code&gt; to my container for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyboard&lt;/code&gt; package to work.&lt;/p&gt;

&lt;p&gt;Want to know another special thing that only affects me because I’m a nerd that obsessively uses containers?&lt;/p&gt;

&lt;p&gt;You need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyboard&lt;/code&gt; package to work, &lt;em&gt;and&lt;/em&gt; I’m using a container. Container’s UID 0 and host’s UID 0 ain’t actually the same UID, and I ain’t about to make the container privileged just so my container can have access to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/input/input*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another thing, imagine a &lt;em&gt;meme&lt;/em&gt; tool requiring you to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo ./main.py&lt;/code&gt;, which hence requires users to install packages to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;site-packages&lt;/code&gt; so that root’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; instance can find it - it’s absolutely bonkers!&lt;/p&gt;

&lt;p&gt;On Windows and Mac OSX, according to what I can see from the &lt;a href=&quot;https://pypi.org/project/keyboard/#description&quot;&gt;project description&lt;/a&gt;, it doesn’t seem to require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt;. Hence, I decided to apply abstraction to the keyboard-related dealings for this Python script, and implement both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyboard&lt;/code&gt; for Windows and Mac OSX computers and an X11 method using &lt;a href=&quot;https://github.com/python-xlib/python-xlib&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-xlib&lt;/code&gt;&lt;/a&gt; for Linux users.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;figuring-out-how-to-adjust-playback-rate-on-the-fly&quot;&gt;Figuring out how to adjust playback rate on the fly&lt;/h1&gt;

&lt;p&gt;The implementation of on-the-fly adjustment of the playback rate fell on me, as I had to do so in the callback function every second.&lt;/p&gt;

&lt;p&gt;Traditionally, to increase the speed of an audio track, you would do so by re-sampling the audio, and then playing back the audio at the audio’s original sample rate. For instance, if my audio’s original sample rate is 44100, and I would like to see it played back twice as fast, I would re-sample the audio to 22050, and playback the resultant audio at 44100.&lt;/p&gt;

&lt;p&gt;Refer to the following images. The y-axis represent the audio, while the x-axis can represent the time, both in arbitrary units. The graph as a whole represents a explanatory audio waveform. The distance between each point represent the playback sample rate, and the distance between each bar under the graph represents the audio file’s sample rate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200820_2.png&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;A sine waveform representing audio&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Before re-sampling | Source: Me&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200820_3.png&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;The previous sine waveform representing audio, but shrinked&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;After re-sampling | Source: Me&lt;/p&gt;

&lt;p&gt;From the images:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The distance between each point remains the same =&amp;gt; playback sample rate is the same&lt;/li&gt;
  &lt;li&gt;The distance between each bar under the graph decreases by half =&amp;gt; audio file sample rate is reduced by half&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the playback speed is the same, and the graph is compressed horizontally, hence, the user will hear the audio played back at twice the original speed.&lt;/p&gt;

&lt;p&gt;However, we cannot simply change any of the two available sample rates on the fly during playback. We either need to adjust the playback sample rate before restarting the playback device, or we can be true-blood engineers and find a “good enough” alternative.&lt;/p&gt;

&lt;h2 id=&quot;pulse-code-modulation-pcm-data&quot;&gt;Pulse-code modulation (PCM) data&lt;/h2&gt;

&lt;p&gt;During a callback, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniaudio&lt;/code&gt; requests a fixed number of frames (basically an array of 16-bit PCM data in our case) based on the playback sample rate. From the number of channels (i.e. width), we can obtain the total amount of PCM data to return, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playback rate * number of channels&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the most part, when we talk about PCM in this context, we are actually talking about Linear PCM (LPCM), which means that all the points encoded in an audio waveform is linearly related to their analog equivalents.&lt;/p&gt;

&lt;p&gt;This is good, because this means that we can do linear piece-wise (i.e. line between every two points in an array) interpolation to obtain a representation of the audio waveform every callback, and then re-sample from that segment of the waveform to speed up / slow down the audio on demand.&lt;/p&gt;

&lt;h2 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h2&gt;

&lt;p&gt;In a nutshell, linear piece-wise interpolation is just plotting all the points you have, and the connecting every two points with a straight line.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200820_4.png&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Interpolated sine-wave&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Interpolated sine-wave | Source: Me&lt;/p&gt;

&lt;p&gt;To increase playback rate by 2, we need to re-sample the audio such that there is half as many points as there are in our original graph. The blue dots in the graph below represents the newly sampled points from our interpolated graph.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200820_5.png&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Extracting points from the interpolated sine-wave&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Extracting points from interpolated sine-wave | Source: Me&lt;/p&gt;

&lt;p&gt;Practically speaking, we would also need to obtain twice as much data from the audio as per normal, as we need to return the exact number of required frames to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniaudio&lt;/code&gt;. In the above graphs, there are 17 red points but only 9 blue points; hence, we need another 8 blue points, which can be acquired by taking the subsequent same-sized chunk of the audio and sampling another 8 blue points from there.&lt;/p&gt;

&lt;p&gt;In conclusion, we draw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample rate * playback rate&lt;/code&gt; of data from the array of original audio data, perform interpolation, then extract &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample rate&lt;/code&gt; amount of data - this would effectively control the playback rate of our audio.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;making-the-tool-support-future-extensions&quot;&gt;Making the tool support future extensions&lt;/h1&gt;

&lt;p&gt;If you poke around the codebase, you would see that I’ve made most of the functionality required for TypeSound accessible via interfaces. This is a plan towards making the tool extensible in the future, so that I can swap out any of the underlying packages anytime I need to; i.e. instead of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miniaudio&lt;/code&gt;, I can choose to use another package, or select specific implementations for certain operating systems, or change the configuration schema without breaking the previous versions of config files.&lt;/p&gt;

&lt;p&gt;The main challenge is generalizing before I have the underlying possible implementations done - it’s easy to miss out certain required functions in abstractions if all I’m doing is designing the interface first. Fortunately, this is a small enough project where such mistakes don’t cost a lot of effort to rectify; however, I imagine this to be an issue in a large team.&lt;/p&gt;

&lt;p&gt;It’s also relatively challenging to see the benefits of abstraction this early on in the project; hopefully I won’t have to redo major parts of the project just to benefit some from abstraction.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;writing-meaningful-unit-tests&quot;&gt;Writing meaningful unit tests&lt;/h1&gt;

&lt;p&gt;How exactly does one go about writing unit tests for scripts with functionality so close to its inputs (keyboard) and outputs (music playback rate)? For now, I’ve placed unit tests wherever I can, except for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.py&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.py&lt;/code&gt; scripts. I would imagine testing those would qualify as functional tests since they’re using the components I’ve built as a system; moreover, the environments in GitHub runners where the tests run neither have X Servers nor sound devices to perform meaningful or conclusive tests.&lt;/p&gt;

&lt;p&gt;So, good enough? :man_shrugging:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;That ends the developer commentary for TypeSound. Honestly, I did not expect this project to take more than a weekend to complete, but I would imagine that the information I’ve learnt off the project was a good enough trade-off.&lt;/p&gt;

&lt;p&gt;If you’ve got an Ubuntu system, do give TypeSound a try; otherwise, wait a while while I add support for Windows and Mac OSX!&lt;/p&gt;

&lt;p&gt;Until then!&lt;/p&gt;

&lt;p&gt;Happy coding&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="developer" /><category term="developer" /><category term="python" /><category term="typesound" /><summary type="html">This is the development commentary blog post for TypeSound, which outlines the decisions behind some of the components that make the project tick. To know more about the release of TypeSound and how to use it, refer to the previous blog post.</summary></entry><entry><title type="html">TypeSound (Release)</title><link href="https://codingindex.xyz/2020/08/20/typesound/" rel="alternate" type="text/html" title="TypeSound (Release)" /><published>2020-08-20T03:00:00+00:00</published><updated>2020-08-20T03:00:00+00:00</updated><id>https://codingindex.xyz/2020/08/20/typesound</id><content type="html" xml:base="https://codingindex.xyz/2020/08/20/typesound/">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Most of this post is satire, although &lt;a href=&quot;https://github.com/jameshi16/TypeSound&quot;&gt;TypeSound&lt;/a&gt; actually does exist, and does correspond your typing speed with playback rate. Refer to &lt;a href=&quot;#typesound&quot;&gt;this section&lt;/a&gt; for setup instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;typing&quot;&gt;Typing&lt;/h1&gt;

&lt;p&gt;Typing on its own is relatively inconsequential - after all, it is all but a means to put down your thoughts and contributions, which can hopefully be accumulated with efforts from others towards impacting the world in any form.&lt;/p&gt;

&lt;p&gt;The virtue of typing has assimilated into our DNA so much, that it has become a norm - typing is no longer a meaningful and special activity. The feeling of pure ecstasy as you tap your fingers on the pleasingly noisy keys of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Typewriter&quot;&gt;typewriter&lt;/a&gt;, the first &lt;a href=&quot;https://en.wikipedia.org/wiki/IBM_PC_keyboard&quot;&gt;IBM keyboard&lt;/a&gt;, and your first ever mechanical keyboard wears out after a few weeks.&lt;/p&gt;

&lt;p&gt;The activity of typing once again becomes a chore to put down your thoughts and contributions towards advancing (or regressing) humanity. This is a normal process, and the conventional status quo between you and your latest keyboard would have remained if only this nosy fellow called CodingIndex did not intervene.&lt;/p&gt;

&lt;h1 id=&quot;music&quot;&gt;Music&lt;/h1&gt;

&lt;p&gt;Music has evolved over the decades it has existed; in some ways, each golden era of a genre represents the lifeblood of a generation. After all, music is a universal language capable of invoking emotions, conveying deep messages and inspiring people of diverse backgrounds and cultures to keep on creating.&lt;/p&gt;

&lt;p&gt;The point is: music never gets boring. Not only is it a platform for artists to share their talents, but also a form of communication we rely on to change perceptions - hence, it grows with us (happy birthday), and dies with us (parlor music, or if you’re a hardcore meme king/queen, &lt;a href=&quot;https://www.youtube.com/watch?v=iLBBRuVDOo4&quot;&gt;this&lt;/a&gt;). People comment “play this at my funeral” on their favourite sad songs, write short stories for inspirational music, and use dramatic soundtrack to signify - well, drama, in a video clip.&lt;/p&gt;

&lt;h1 id=&quot;idea-keyboard--musical_note&quot;&gt;Idea :keyboard: + :musical_note:&lt;/h1&gt;

&lt;p&gt;What if, we renewed the excitement of pressing keys on a keyboard, by intrinsically combining that with music?&lt;/p&gt;

&lt;p&gt;What if, the combination involved the &lt;em&gt;playback rate&lt;/em&gt; of music?&lt;/p&gt;

&lt;p&gt;Introducing :drum:… TypeSound!&lt;/p&gt;

&lt;h1 id=&quot;typesound&quot;&gt;TypeSound&lt;/h1&gt;

&lt;p&gt;TypeSound is a bunch of python scripts working together to involve your music into your typing experience by linking your typing speed to the playback rate of your favourite songs. By being in direct control of how you hear your music, not only is it a source of entertainment whenever you get bored on your desk, but also an incentive for typing - bringing a direct purpose to your typing session.&lt;/p&gt;

&lt;p&gt;Just listen to this satisfied user:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I haven’t tried TypeSound, nor am I a real person, but I love it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What are you waiting for? Try &lt;a href=&quot;https://github.com/jameshi16/TypeSound&quot;&gt;TypeSound&lt;/a&gt; today!&lt;/p&gt;

&lt;h2 id=&quot;setting-up&quot;&gt;Setting up&lt;/h2&gt;

&lt;p&gt;The masterpiece known as TypeSound has the following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sox.sourceforge.net/&quot;&gt;sox&lt;/a&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libsox-fmt-mp3&lt;/code&gt; extension. Seems to come with the Windows and MacOS installer.
    &lt;ul&gt;
      &lt;li&gt;For Ubuntu systems, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install -y sox libsox-fmt-mp3&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python 3.6 or above&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Access to any typing speed test website like &lt;a href=&quot;https://10fastfingers.com/typing-test/english&quot;&gt;10fastfingers&lt;/a&gt; or &lt;a href=&quot;https://play.typeracer.com/&quot;&gt;TypeRacer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: Widnows and Mac OSX are not supported yet, because detecting keypresses on your keyboard is done in a Linux-only way (relies on X11). Support should be coming soon, and this notice will be removed accordingly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Optional) If you want, create a virtual environment for TypeSound. On Ubuntu, this is achieved with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; python3 ~/.environments/typesound
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.environments/typesound/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install the required pip packages by running the following command in terminal (Linux/Mac OS) or PowerShell (Windows):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, run the configuration script. It’ll prompt some instructions to you, and you just need to follow them to complete your first configuration:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./config.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Subsequently, when you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./config.py&lt;/code&gt; again, it will modify the existing configuration.&lt;/p&gt;

&lt;p&gt;When you are satisfied with your configuration, run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./main.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then start typing away! You should hear the music increase/decrease its playback rate based on your typing speed.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope you enjoyed this blog post; most of the content is satire, except for the “Setting up” section. In reality, I wrote the scripts for my own entertainment and learning, testing features on GitHub, listening to the keyboard, and performing audio processing to increase/decrease playback rate.&lt;/p&gt;

&lt;p&gt;There is one more blog post that talks about how I developed TypeSound, the problems I faced and how I overcame them. Do check it out &lt;a href=&quot;/2020/08/20/typesound-dev&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="release" /><category term="release" /><category term="python" /><category term="typesound" /><summary type="html">NOTE: Most of this post is satire, although TypeSound actually does exist, and does correspond your typing speed with playback rate. Refer to this section for setup instructions.</summary></entry><entry><title type="html">Angular CI/CD with GitHub Actions</title><link href="https://codingindex.xyz/2020/05/27/angular-cicd-with-github-actions/" rel="alternate" type="text/html" title="Angular CI/CD with GitHub Actions" /><published>2020-05-27T09:00:00+00:00</published><updated>2020-05-27T09:00:00+00:00</updated><id>https://codingindex.xyz/2020/05/27/angular-cicd-with-github-actions</id><content type="html" xml:base="https://codingindex.xyz/2020/05/27/angular-cicd-with-github-actions/">&lt;p&gt;Recently, I needed to setup a functional CI/CD pipeline for an Angular Project. Given how hard GitHub has been pushing their “GitHub Actions” feature, I decided to give it a try. Here is how to setup CI/CD for an fresh Angular project on GitHub.&lt;/p&gt;

&lt;h1 id=&quot;step-0-concepts&quot;&gt;Step 0: Concepts&lt;/h1&gt;

&lt;p&gt;GitHub workflows uses GitHub actions, and GitHub actions are ideally public repositories that are published on the Marketplace. As of writing, first-class support for private GitHub repository actions &lt;a href=&quot;https://github.com/actions/checkout/issues/95&quot;&gt;does not exist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are three main ways around it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Git Submodules,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.community/t5/GitHub-Actions/Github-action-action-in-private-repository/m-p/54341/highlight/true#M9141&quot;&gt;Cloning the action with an access token on run&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-using-action-in-the-same-repository-as-the-workflow&quot;&gt;Local GitHub actions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are two types of GitHub Actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker container or,&lt;/li&gt;
  &lt;li&gt;JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main difference between the two actions is that JavaScript actions should not call other executables (i.e. not dependent on specific executables), while Docker container actions can (because they are containers).&lt;/p&gt;

&lt;p&gt;For this blog post, I’ll use local Docker container GitHub actions for both CI and CD. The below represents a logical architecture of what I’m gonna setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200527_1.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Logical Architecture&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Logical architecture | Source: Me&lt;/p&gt;

&lt;h1 id=&quot;step-1-installing-the-github-actions-runner&quot;&gt;Step 1: Installing the GitHub Actions runner&lt;/h1&gt;

&lt;p&gt;As I’m setting up GitHub Actions for a private repository, I decided to use a self-hosted GitHub actions runner, since I have an unused VPS server lying around doing nothing. At the time of writing, a self-hosted GitHub actions runner is not required, as GitHub’s Free Plan gives 2,000 action minutes per month for private repositories which seems enough for a few small projects.&lt;/p&gt;

&lt;p&gt;Installing the GitHub Actions runner can be easily done by following the instructions on &lt;a href=&quot;https://help.github.com/en/actions/hosting-your-own-runners/adding-self-hosted-runners&quot;&gt;this GitHub help page&lt;/a&gt;. A unit service can then be created by following the instructions on &lt;a href=&quot;https://help.github.com/en/actions/hosting-your-own-runners/configuring-the-self-hosted-runner-application-as-a-service&quot;&gt;this other GitHub help page&lt;/a&gt;, although I wrote mine manually just for giggles.&lt;/p&gt;

&lt;p&gt;If you’re using Docker container actions, ensure that the environment has Docker installed, and is accessible by the user running the GitHub action runner. If you’re using Javascript actions, you &lt;em&gt;should&lt;/em&gt; install &lt;a href=&quot;https://github.com/actions/toolkit&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions/toolkit&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After following the steps properly, I observe that the runner pops up in my settings page:
&lt;img src=&quot;/images/20200527_2.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Self-hosted GitHub Runner&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Self-hosted GitHub Runner | Source: Me&lt;/p&gt;

&lt;p&gt;I also added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vps&lt;/code&gt; tag, but it’s not really useful when I only have one self-hosted runner. Tagging can help GitHub workflows to differentiate between machines; for example, only distributing the GPU-intensive workflow to GPU-capable machines.&lt;/p&gt;

&lt;h1 id=&quot;step-2-continuous-integration&quot;&gt;Step 2: Continuous Integration&lt;/h1&gt;

&lt;p&gt;When developers make changes to the codebase, they generally want to ensure that the incoming code is high quality and maintainable. This usually involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stringent Pull Request reviews&lt;/li&gt;
  &lt;li&gt;An automation process checking for the following things:
    &lt;ol&gt;
      &lt;li&gt;Is it buildable?&lt;/li&gt;
      &lt;li&gt;Is it good on the lint?&lt;/li&gt;
      &lt;li&gt;Are the tests passing?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Angular has a few straightforward CLI commands that can test for code quality, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng lint&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng test &amp;amp;&amp;amp; ng e2e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, all I need to do now is to translate our CLI commands into a GitHub action. Luckily, &lt;a href=&quot;https://github.com/colbyhill21/angular-full-ci&quot;&gt;colbyhill21 has already made a full CI action for Angular&lt;/a&gt;, which is easy to integrate into your own GitHub workflow.&lt;/p&gt;

&lt;p&gt;However, I decided to reinvent the wheel, because I’m bored and have nothing better to do. Furthermore, understanding how the black box works speeds up debugging issues pertaining to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng test&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng e2e&lt;/code&gt;, which I experienced while writing this blog post.&lt;/p&gt;

&lt;p&gt;Let’s create the directories required for our local Github action.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .github/actions/angular-ci
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puppeteer&lt;/code&gt; (for unit testing &amp;amp; end-to-end testing) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@angular/cli&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-ci/Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:12-slim&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-in-docker&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; wget gnupg procps &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo &quot;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get update &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; google-chrome-unstable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;      &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install Angular CLI&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unsafe-perm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--allow-root&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli puppeteer

&lt;span class=&quot;c&quot;&gt;# Entrypoint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; entrypoint.sh /entrypoint.sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /entrypoint.sh
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/entrypoint.sh&quot;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This tells docker to build an image that has the environment to run Angular CLI commands for testing. Next, I create a GitHub action, and tell it to run the Docker image. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-ci/action.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Angular&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CI'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Runs&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;commands'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dockerfile'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running Angular tests implies some level of interaction with the browser - since I don’t have GUI access to the browser when a GitHub action is running, I configured the tests to run on a headless browser. Firstly there’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;karma.conf.js&lt;/code&gt;, the configuration file for Angular’s unit testing framework:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ChromeHeadless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ChromeHeadlessCI&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customLaunchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;ChromeHeadlessCI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ChromeHeadless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--no-sandbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--disable-translate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--disable-extensions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--remote-debugging-port=9223&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, I re-configured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./e2e/protractor.conf.js&lt;/code&gt;, the end-to-end testing framework:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;capabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;goog:chromeOptions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--no-sandbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--headless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--disable-gpu, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;]
        }
    }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The testing frameworks now use headless browsers to perform their tests, which allows me to do testing in a Docker container, and consequently, in the GitHub action runner.&lt;/p&gt;

&lt;p&gt;With a GitHub action and a properly configured project, I can now configure a GitHub workflow, which is kinda like an “main” file to our actions. The workflow allows me to instruct GitHub to perform certain GitHub actions on certain repository events, like pushes or pull request activity. First, I create the necessary folders:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .github/workflows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I populate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/main.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self-hosted&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout repository&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run CI&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/actions/angular-ci&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on: [self-hosted, linux]&lt;/code&gt; line is necessary for me to select the right GitHub actions runner. You can replace that line with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on: ubuntu-latest&lt;/code&gt; if you’re using GitHub’s runners at the cost of your plan’s GitHub action minutes.&lt;/p&gt;

&lt;h1 id=&quot;step-3-continuous-deployment&quot;&gt;Step 3: Continuous Deployment&lt;/h1&gt;

&lt;p&gt;Continuous Deployment is slightly easier; all I needed to do is to build, copy and paste everything in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist/project_name&lt;/code&gt; (replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_name&lt;/code&gt; with your Angular project name) into a folder on my web server.&lt;/p&gt;

&lt;p&gt;Let’s reuse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular-ci&lt;/code&gt; action by copying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-ci&lt;/code&gt;, to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd/action.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Angular&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CD'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sshkey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SSH&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;address'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;knownhosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;identify&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dockerfile'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.sshkey } }&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.user }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.host }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.knownhosts }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I required myself to deploy via SSH safely. This means two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SSH Keys for authentication and,&lt;/li&gt;
  &lt;li&gt;Specifying the web server’s host keys to ensure its identity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hence, I introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action.yml&lt;/code&gt; file, allowing the workflow to specify the SSH key and Host keys. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; is a method to specify parameters that can be used throughout the execution of the action; they will appear as environment variables prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INPUT_&lt;/code&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshkey&lt;/code&gt; will be exposed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$INPUT_SSHKEY&lt;/code&gt; during the execution of the action.&lt;/p&gt;

&lt;p&gt;To ensure no Man-In-The-Middle attacks happen, I decided to specify host keys too. Essentially, we identify the production machine on our location machine first:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keyscan &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &amp;lt;your &lt;span class=&quot;nb&quot;&gt;hostname &lt;/span&gt;here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we store the result into a GitHub secret (found under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings &amp;gt; Secrets &amp;gt; Add secret&lt;/code&gt;):
&lt;img src=&quot;/images/20200527_3.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Host key secret&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Add the host key secret | Source: Me&lt;/p&gt;

&lt;p&gt;While I’m specifying the secrets, I might as well generate the private key secret on the web server too:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# THIS IS ON THE WEB-SERVER&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/ubuntu/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;test.
Your public key has been saved &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;test.pub.
The key fingerprint is:
SHA256:GCVhv6Of2eOpPzfwlBMi4ohzuBiSFjdOdVX/xaA7IsE ubuntu@Desktop
The key&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;s randomart image is:
+---[RSA 3072]----+
|      +.o...  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  |
|     o &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;    .. o |
|    &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; o E   ..  o|
| &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; +  .o.o. ... .|
| .&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;o.o..S...oo &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; |
|+.+.o .. o..+.   |
|oo +  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;    + &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;   |
|. &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; +o.+    |
|        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;   |
+----[SHA256]-----+
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /home/ubuntu/.ssh/id_rsa
&amp;lt;private key contents&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, store the result into a GitHub secret:
&lt;img src=&quot;/images/20200527_4.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Private key secret&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Add the private key secret | Source: Me&lt;/p&gt;

&lt;p&gt;Now I have two secrets.
&lt;img src=&quot;/images/20200527_5.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Secrets...&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Two secrets | Source: Me&lt;/p&gt;

&lt;p&gt;Now, I configure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt; files under the new action.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd/Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:12-slim&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install SSH and SCP&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ssh

&lt;span class=&quot;c&quot;&gt;# Install Angular CLI&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unsafe-perm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--allow-root&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli puppeteer

&lt;span class=&quot;c&quot;&gt;# Entrypoint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; entrypoint.sh /entrypoint.sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /entrypoint.sh
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/entrypoint.sh&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd/entrypoint.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;======[ Dependencies ]======&quot;&lt;/span&gt;
npm &lt;span class=&quot;nb&quot;&gt;install

echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;======[ Build ]======&quot;&lt;/span&gt;
ng build &lt;span class=&quot;nt&quot;&gt;--prod&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.ssh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT_KNOWNHOSTS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.ssh/known_hosts
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;644 &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.ssh/known_hosts
ssh-add &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT_SSHKEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ssh &lt;span class=&quot;nv&quot;&gt;$INPUT_USER&lt;/span&gt;@&lt;span class=&quot;nv&quot;&gt;$INPUT_HOST&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rm -rf /var/www/html/*&quot;&lt;/span&gt;
scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; dist/project_name_here/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INPUT_USER&lt;/span&gt;@&lt;span class=&quot;nv&quot;&gt;$INPUT_HOST&lt;/span&gt;:/var/www/html/.
ssh-agent &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; node_modules/
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; dist/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; installs the required pre-requisites, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt; file builds the project and copies the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist/project_name/*&lt;/code&gt; into the deployment folder.&lt;/p&gt;

&lt;p&gt;Finally, I create a workflow to utilize our action:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/deploy.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self-hosted&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout repository&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run Continuous Deploy&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/actions/angular-cd&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;sshkey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.SSH_KEY }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PUT_YOUR_SSH_USER_HERE&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PUT_YOUR_HOST_HERE&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;knownhosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.KNOWN_HOSTS }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular-cd&lt;/code&gt; action requires some inputs, I specified it in this workflow. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; accesses the encrypted secrets configured earlier, which is then passed to the GitHub action runner to complete its job.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Done! After committing, pushing and creating a PR, the workflows should kick into action immediately, checking the repository for lint, build and test errors. After merging the PR into master, it should trigger the deploy workflow, and your code will be automagically deployed.&lt;/p&gt;

&lt;p&gt;Happy coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="fluff" /><category term="angular" /><category term="cicd" /><category term="github" /><summary type="html">Recently, I needed to setup a functional CI/CD pipeline for an Angular Project. Given how hard GitHub has been pushing their “GitHub Actions” feature, I decided to give it a try. Here is how to setup CI/CD for an fresh Angular project on GitHub.</summary></entry><entry><title type="html">Bash Scripting Essentials</title><link href="https://codingindex.xyz/2020/03/07/bash-scripting-essentials/" rel="alternate" type="text/html" title="Bash Scripting Essentials" /><published>2020-03-07T15:00:00+00:00</published><updated>2020-03-07T15:00:00+00:00</updated><id>https://codingindex.xyz/2020/03/07/bash-scripting-essentials</id><content type="html" xml:base="https://codingindex.xyz/2020/03/07/bash-scripting-essentials/">&lt;p&gt;By no means am I a professional at bash scripting. That being said, I’ve done some pretty cool projects with just pure bash scripting, like &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;ContainerTop&lt;/a&gt;, a container-based desktop environment launcher, and &lt;a href=&quot;https://github.com/jameshi16/ungoogled-chromium-builder&quot;&gt;ungoogled-chromium-builder&lt;/a&gt; to let my private server build ungoogled chromium for my laptops.&lt;/p&gt;

&lt;p&gt;At work, I also write a bunch of utility aliases and functions to aid my work - these are my “commonly utilized” techniques and commands condensed into a blog post. This article is written as a “cheatsheet”, hopefully to serve as a quick reference for myself; though, if you find it useful, you can bookmark this page!&lt;/p&gt;

&lt;p&gt;NOTE: When writing bash scripts, make sure to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod +x ./relative/path/to/script&lt;/code&gt; at least once to flag the script as an executable.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#shebang&quot;&gt;Shebang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#redirects&quot;&gt;Redirects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#subshells&quot;&gt;Subshells&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exit-on-error&quot;&gt;Exit on error&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#return-code&quot;&gt;Return code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ending-a-block&quot;&gt;Ending a block&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arrays&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finding-files&quot;&gt;Finding files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#replacing-strings&quot;&gt;Replacing strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finding-strings&quot;&gt;Finding strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#xargs&quot;&gt;xargs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#removing-columns&quot;&gt;Removing columns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#newlines-are-not-preserved&quot;&gt;Newlines are not preserved&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;shebang&quot;&gt;Shebang&lt;/h1&gt;

&lt;p&gt;Any executable file containing the “shebang” in its first line:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will cause the script to be executed by the specified executable, which also means the script needs to be in a language understood by those executables. Some common shebangs I’ve write are: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/ruby&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/python3&lt;/code&gt;, which uses the Ruby and Python interpretor for the script respectively. Most people publishing scripts for usage online use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/env ruby&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/env python3&lt;/code&gt; instead, allowing users with non-standard or different interpretor locations to use the scripts.&lt;/p&gt;

&lt;h1 id=&quot;redirects&quot;&gt;Redirects&lt;/h1&gt;

&lt;p&gt;Redirects use the operators &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;. By default, inputs come from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDIN&lt;/code&gt; and outputs go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;, which are typically your terminal input and output respectively. This behaviour can be changed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Will write the word “hello” out to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, which is a normal file.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &amp;lt; file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Will read the word “hello” from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, which is the same file the “echo” has written “hello” to.&lt;/p&gt;

&lt;h2 id=&quot;common-use-case-log-files&quot;&gt;Common use case: Log files&lt;/h2&gt;

&lt;p&gt;Redirects can let you log the outputs of commands:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /var/log/syslog 2&amp;gt;&amp;amp;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Whatever expression in front of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; will produce outputs that go into the log file. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; instructs bash to redirect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDERR&lt;/code&gt;(2) to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;(1). This is quite helpful for commands that don’t typically output to log files.&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;The ampersand symbol at the back of a command will cause it to run in the background:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;999 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When a background command is executed within an interactive shell, you can switch back to it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fg&lt;/code&gt; and switch away from it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL+Z&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt; to view the processes currently running in the terminal session. For a terminal session with no background processes, you should see two items: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; itself, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;subshells&quot;&gt;Subshells&lt;/h1&gt;

&lt;p&gt;Subshells are created with the following syntax:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The results are assignable to a variable, but without protection, it can run arbitrary commands. Try this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo oh no&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh no&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo oh no&lt;/code&gt;. Such arbitrary commands can be avoided by enclosing the subshell with quotes (“). This works because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; is an escape cue for bash when interpreting strings.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo oh no'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;variables&quot;&gt;Variables&lt;/h1&gt;

&lt;p&gt;Variables can be defined like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can be used with “$VARIABLE”:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Both variants should print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To inhibit printing, use single quotes (‘):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$VARIABLE'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The line should print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$VARIABLE&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;exit-on-error&quot;&gt;Exit on error&lt;/h1&gt;

&lt;p&gt;There are two ways to achieve this: (i) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set -e&lt;/code&gt; and (ii) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|| exit 1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; thisfiledoesnotexist &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is highly recommended to use the latter, as the behaviour is more well-structured and well-defined. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set -e&lt;/code&gt; causes the shell to exit on error if &lt;em&gt;any&lt;/em&gt; subcommands return with an error (defined as non-zero return status), while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|| exit&lt;/code&gt; only exits on that particular line.&lt;/p&gt;

&lt;h1 id=&quot;return-code&quot;&gt;Return Code&lt;/h1&gt;

&lt;p&gt;To know the last return code of a command, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$?&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this should succeed&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; is success.&lt;/p&gt;

&lt;h1 id=&quot;ending-a-block&quot;&gt;Ending a block&lt;/h1&gt;

&lt;p&gt;Different control statements have different ending statements. Below show some examples.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/syslog&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;congratulations, you have a system log&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
	&lt;/span&gt;7&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lucky seven&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	10|16&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my favourite number&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	42&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;universe number&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nothing special&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;NUMBERS &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1 2 3 4 5 
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUMBERS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;arrays&quot;&gt;Arrays&lt;/h1&gt;

&lt;p&gt;Arrays can be defined like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;1 2 3 4 5 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1 2 3 4 5 6&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[0]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Turning a string of space-delimited strings into an array can be done with the following command (thanks to &lt;a href=&quot;https://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash/13196466&quot;&gt;this link&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; ARRAY &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1 2 3 4 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use arrays in for loops like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;NUMBERS &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUMBERS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;finding-files&quot;&gt;Finding files&lt;/h1&gt;

&lt;p&gt;Files can be recursively found using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.js&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; to a directory of your choice. The pattern defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-name&lt;/code&gt; supports the metacharacters: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, but only works for &lt;em&gt;filenames&lt;/em&gt;, so a pattern of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a/b&lt;/code&gt; cannot be used. Instead, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-prune&lt;/code&gt; option to remove directories that should not be included in the search. (Thanks to &lt;a href=&quot;https://stackoverflow.com/questions/4210042/how-to-exclude-a-directory-in-find-command&quot;&gt;this&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-prune&lt;/code&gt; command to remove directories you are not interested in, like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Documents&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-prune&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.zip&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-print&lt;/span&gt;
find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt; .path dir1 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt; dir2 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; path dir3 &lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-prune&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;replacing-strings&quot;&gt;Replacing strings&lt;/h1&gt;

&lt;p&gt;Strings can be replaced with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; command (among other utilities):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i think apples are great&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/apples/oranges/g'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It might sometimes be necessary to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-E&lt;/code&gt; flag for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; when a more complicated regex is used. I typically use &lt;a href=&quot;https://regexr.com/&quot;&gt;regexr&lt;/a&gt; to build my Regex. The ‘s/’ is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; command that means “substitute”, with the ‘/g’ at the back representing “replace everything”. The one page GNU &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; manual can be found &lt;a href=&quot;https://www.gnu.org/software/sed/manual/sed.html&quot;&gt;here&lt;/a&gt;, or obtained via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man sed&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The escape character for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; (backslash).&lt;/p&gt;

&lt;h2 id=&quot;files&quot;&gt;Files&lt;/h2&gt;

&lt;p&gt;To replace a string in a file, simply provide an input file instead of piping the input:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;aFile
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; aFile
i
like
oranges
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/oranges/pears/g'&lt;/span&gt; aFile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; flag means “edit file in-place”.&lt;/p&gt;

&lt;h1 id=&quot;finding-strings&quot;&gt;Finding strings&lt;/h1&gt;

&lt;p&gt;Strings can be recursively found in directories using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; (among other utilities):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;important string&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# searches all files recursively for important string&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[aeiou]+&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# searches all files for strings with one or more vowels&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[aeiou]+&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.js &lt;span class=&quot;c&quot;&gt;# searches all .js files for strings wiht one or more vowels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;xargs&quot;&gt;xargs&lt;/h1&gt;

&lt;p&gt;To pass the left-hand-side of a pipe as an argument to the right-hand-side for commands that don’t support reading from pipes, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xargs&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;newBranch&quot;&lt;/span&gt; | xargs git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;removing-columns&quot;&gt;Removing columns&lt;/h1&gt;

&lt;p&gt;If you have text like this (you can get something like this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git branch
* master
  develop
  bug-fixes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can make the output processable by removing the first two columns (which contain the asterisk) with:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch | colrm 1 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;master
develop
bug-fixes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;newlines-are-not-preserved&quot;&gt;Newlines are not preserved&lt;/h1&gt;

&lt;p&gt;Say you have a string with newlines, like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hello\nworld&quot;&lt;/code&gt;. If you assign it to a variable after processing like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;world&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Your output would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hello world&quot;&lt;/code&gt;. Be aware of this issue when writing scripts; this can probably be mitigated by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tr&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello
world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;That should be all for now. I may occasionally pop by to update this page, but the permalink should still stay the same. Keep a bookmark :bookmark: if you found it useful!&lt;/p&gt;

&lt;p&gt;Happy coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="utility" /><category term="linux" /><category term="linux" /><summary type="html">By no means am I a professional at bash scripting. That being said, I’ve done some pretty cool projects with just pure bash scripting, like ContainerTop, a container-based desktop environment launcher, and ungoogled-chromium-builder to let my private server build ungoogled chromium for my laptops.</summary></entry><entry><title type="html">Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part III)</title><link href="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-3/" rel="alternate" type="text/html" title="Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part III)" /><published>2019-09-05T19:30:00+00:00</published><updated>2019-09-05T19:30:00+00:00</updated><id>https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-3</id><content type="html" xml:base="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-3/">&lt;p&gt;In theory, this tutorial is out of scope if we’re talking about the title; however, this tutorial is crucial, because it completes the entire IoT stack. In this tutorial, you will be building on whatever you have done in &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;Part I&lt;/a&gt; and &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;Part II&lt;/a&gt;, to build application logic that makes decisions and commands the IoT actuators based on information obtained via sensors.&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;

&lt;p&gt;The previous tutorials, &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;Part I&lt;/a&gt; and &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;Part II&lt;/a&gt;, must be done.&lt;/p&gt;

&lt;h1 id=&quot;step-one&quot;&gt;Step One&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the AWS Mangement Console.&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IAM&lt;/strong&gt; (found under the section “Security, Identity &amp;amp; Compliance).
 &lt;img src=&quot;/images/20190905_15.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWS IAM&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IAM | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Roles&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_16.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Roles&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Roles | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Create role&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_17.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Lambda&lt;/strong&gt; under the &lt;strong&gt;Choose the service that will use this role&lt;/strong&gt;. Then, click on &lt;strong&gt;Next: Permissions&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190906_1.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Choosing the service to use the role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Choosing the service to use the role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Search and select the policies: “AWSLambdaBasicExecutionRole”, “AmazonDynamoDBFullAccess”, and “AWSIoTDataAccess” from the policy search bar. Then, click &lt;strong&gt;Next: Tags&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190906_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWSLambdaBasicExecutionRole&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;AWSLambdaBasicexecutionRole | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190906_3.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AmazonDynamoDBFullAccess&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;AmazonDynamoDBFullAccess | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190906_4.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWSIoTDataAccess&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;AWSIoTDataAccess | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Next: Review&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_20.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Next: Review&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Next: Review | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the role whatever you wish (Field: &lt;em&gt;Role name&lt;/em&gt;). For the purposes of this tutorial, it will be named “lambda-role”. Then, click on &lt;strong&gt;Create role&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190906_5.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create the role with a name&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create the role with a name | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;Lambda&lt;/strong&gt; (found under the section “Compute”)
 &lt;img src=&quot;/images/20190906_6.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Lambda&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on Lambda | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Create a function&lt;/strong&gt; if you are a new user, or &lt;strong&gt;Create function&lt;/strong&gt; if you already have some lambda functions on your account.
&lt;img src=&quot;/images/20190906_7.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a function (new users)&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Creating a function for new users | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/20190906_8.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a function (existing users)&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Creating a function for existing users | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the function whatever you wish (Field: &lt;em&gt;Function name&lt;/em&gt;). For the purposes of this tutorial, it will be named “iot-lambda”. Then, select the role created earlier in step 9, under the &lt;strong&gt;Existing role&lt;/strong&gt; dropbox. You may have to click a dropdown link (&lt;strong&gt;Choose or create an execution role&lt;/strong&gt;) to reach this setting. Finally, click on &lt;strong&gt;Create function&lt;/strong&gt;.
&lt;img src=&quot;/images/20190906_9.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Fill in the fields, and create the function&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Fill in the fields, and create the function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Fill the code editor with code from &lt;a href=&quot;https://gist.github.com/jameshi16/851dc9de904811c1b2304cfc1f819f1d&quot;&gt;this gist&lt;/a&gt;.
&lt;img src=&quot;/images/20190906_10.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Fill in the code for the lambda function&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Fill in the code for the lambda function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Set the environment variables, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TABLE_NAME&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOT_ENDPOINT&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOT_PUBLISH_TOPIC&lt;/code&gt; based on the DynamoDB table name, your IoT endpoint, and the topic subscribed by the ESP32.
&lt;img src=&quot;/images/20190906_11.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Environment Variables&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Set environment variables | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Save&lt;/strong&gt;, at the top right of the screen.
&lt;img src=&quot;/images/20190906_12.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on Save&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Save the lambda function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IoT Core&lt;/strong&gt; (found under the section “Internet of Things”)
&lt;img src=&quot;/images/20190622_1.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Services button on AWS Console&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IoT Core | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/20190622_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Core&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;IoT Core | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Act&lt;/strong&gt;
&lt;img src=&quot;/images/20190905_7.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Act button on IoT Core&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Act | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the IoT rule you have created in Part II. If you have not done part II, please do &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;it now&lt;/a&gt;.
&lt;img src=&quot;/images/20190906_13.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on the IoT rule created previously&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IoT rule created previously&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Add Action&lt;/strong&gt;, under the &lt;strong&gt;Actions&lt;/strong&gt; section.
&lt;img src=&quot;/images/20190906_14.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Add another action&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Add another action | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Send a message to a Lambda function&lt;/strong&gt;, and click on &lt;strong&gt;Configure Action&lt;/strong&gt; at the bottom of the page.
&lt;img src=&quot;/images/20190906_15.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Add a lambda action&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Adding a lambda action | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Under the &lt;em&gt;Function name&lt;/em&gt; field, click on &lt;strong&gt;Select&lt;/strong&gt;, then find the function created earlier in step 11, and click &lt;strong&gt;Select&lt;/strong&gt; on the corresponding entry. Finally, click on &lt;strong&gt;Add Action&lt;/strong&gt;.
&lt;img src=&quot;/images/20190906_16.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Select the correct lambda&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Select the correct lambda function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-two&quot;&gt;Step Two&lt;/h1&gt;

&lt;p&gt;Similar to how it was done in &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;Part II&lt;/a&gt;, go to the DynamoDB table and refresh the contents. Count the number of records currently on the table, and press the ‘BOOT’ button on the ESP32 until that count reaches a multiple of 10. The led of the ESP32 should light up only when there is a multiple of 10, otherwise, it will be turned off.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://gist.github.com/jameshi16/851dc9de904811c1b2304cfc1f819f1d&quot;&gt;lambda script&lt;/a&gt; you pasted earlier is in charge of causing this to happen; firstly, it will obtain device data. Then, it will make a decision based on the device data; in this case, “is the number of records a multiple of 10? If so, turn on the led, else, turn it off”.&lt;/p&gt;

&lt;p&gt;Try connecting multiple ESP32s to the same topics, and see what happens when one of the devices are used to make the number of records reach a multiple of 10!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Congratulations! You have made a full IoT application, starting from Part I: Controlling stuff, to Part II: Collecting data and finally, to Part III: Making decisions. Experiment with this a little bit more, and build the next big thing; you now have the basic skills required to do that on AWS!&lt;/p&gt;

&lt;p&gt;If you found this trilogy useful, please do share it with your friends.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="aws" /><category term="aws" /><category term="iot" /><category term="mqtt" /><summary type="html">In theory, this tutorial is out of scope if we’re talking about the title; however, this tutorial is crucial, because it completes the entire IoT stack. In this tutorial, you will be building on whatever you have done in Part I and Part II, to build application logic that makes decisions and commands the IoT actuators based on information obtained via sensors.</summary></entry><entry><title type="html">Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part II)</title><link href="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-2/" rel="alternate" type="text/html" title="Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part II)" /><published>2019-09-05T12:30:00+00:00</published><updated>2019-09-05T12:30:00+00:00</updated><id>https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-2</id><content type="html" xml:base="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-2/">&lt;p&gt;Finally, the long-awaited (2 months) part II is here!&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;You must have completed &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;Part I&lt;/a&gt; to continue with this tutorial, as this tutorial builds on the previous tutorial.&lt;/p&gt;

&lt;h2 id=&quot;linking-up-aws-iot-to-dynamodb&quot;&gt;Linking up AWS IoT to DynamoDB&lt;/h2&gt;

&lt;p&gt;In the previous part, the ESP32 was linked to DynamoDB via MQTT, and it was possible to control the LED of the ESP32 by publishing a message via the AWS IoT testing console to the subscribed IoT topic. However, IoT is much more than just controlling devices from the cloud. There are some devices, known as “IoT Sensors”, which are able to report sensor data to the internet. Combined with the ability to control devices and with the massive power of Cloud Computing, this allows more powerful machines to make decisions based on the data collected from the sensors, then returning those results as commands to control devices based on inferences made from aforementioned data.&lt;/p&gt;

&lt;p&gt;We can then integrate advanced computing techniques like Big Data and Machine Learning with IoT to better improve lives based around IoT products in a household. This vaguely composites into what is known as “Smart Home”; using a cluster of IoT sensors and actuators to: (i) cut utility bills, (ii) make living more convenient, and (iii) make living more entertaining (&lt;a href=&quot;https://www.androidauthority.com/what-is-a-smart-home-806483/&quot;&gt;AndroidAuthority&lt;/a&gt;, 2019). Scale that to the size of a city, and the term becomes “Smart City”, making payments, transport, security, et. cetera more convenient.&lt;/p&gt;

&lt;p&gt;Therefore, in this section, you will be modifying your handiwork in Part I to make it such that the ESP32 would publish a JSON object indicating that a button on the ESP32 has been pressed. This JSON object will then be mapped as columns on a DynamoDB table.&lt;/p&gt;

&lt;p&gt;Looking at the ESP32 schematics:
&lt;img src=&quot;/images/20190905_1.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Schematics for the 'BOOT' button&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;The schematics for the 'BOOT' button | &lt;a href=&quot;https://dl.espressif.com/dl/schematics/ESP32-Core-Board-V2_sch.pdf&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It appears that the ‘BOOT’ active-low button can be used as a typical button, which is perfect for the current use case.&lt;/p&gt;

&lt;h3 id=&quot;step-ichi&quot;&gt;Step Ichi&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;DynamoDB&lt;/strong&gt; (found under the section “Database”)
 &lt;img src=&quot;/images/20190905_2.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;DynamoDB is under the Database Section&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;DynamoDB | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If you’ve created a DynamoDB table before, you may see a different resultant screen. Click on &lt;strong&gt;Create table&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_3.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;New user DynamoDB&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click this if you don't already have a table | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;img src=&quot;/images/20190905_4.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Existing user DynamoDB&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click this instead if you already have tables | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Fill in &lt;em&gt;Table name&lt;/em&gt; with whatever name you wish. For the purposes of this tutorial, it will be called “iot-table”. Call the partition key “uid”, as we will be generating a random UID per record. Then, click &lt;strong&gt;Create&lt;/strong&gt;. (NOTE: If your account is limited and you are not allowed to create auto-scaling tables, please uncheck &lt;em&gt;Use default settings&lt;/em&gt; and clear all options related to &lt;em&gt;Auto scaling&lt;/em&gt;)
 &lt;img src=&quot;/images/20190905_5.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Table Creation Wizard&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Table Creation Wizard | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IAM&lt;/strong&gt; (found under the section “Security, Identity &amp;amp; Compliance)
 &lt;img src=&quot;/images/20190905_15.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWS IAM&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IAM | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Roles&lt;/strong&gt;
 &lt;img src=&quot;/images/20190905_16.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Roles&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Roles | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Create role&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_17.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;IoT&lt;/strong&gt; under the &lt;strong&gt;Choose the service that will use this role&lt;/strong&gt;. Then, click on &lt;strong&gt;IoT&lt;/strong&gt; under the &lt;strong&gt;Select your use case&lt;/strong&gt;. Finally, click on &lt;strong&gt;Next: Permissions&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_18.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Choosing the service to use the role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Choosing the service to use the role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Next: Tags&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_19.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Next: Tags&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Next: Tags | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Next: Review&lt;/strong&gt;
&lt;img src=&quot;/images/20190905_20.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Next: Review&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Next: Review | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the role whatever you wish (Field: &lt;em&gt;Role name&lt;/em&gt;). For the purposes of this tutorial, it will be named “iot-role”. Then, click on &lt;strong&gt;Create role&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_21.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create the role with a name&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create the role with a name | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the role you have just created.
&lt;img src=&quot;/images/20190905_22.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on the role you have just created&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click the role you have just created | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Attach policies&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_23.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on Attach policies&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Attach Policies | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the search bar, type “DynamoDB”, and select the &lt;strong&gt;AmazonDynamoDBFullAccess&lt;/strong&gt; policy. Then, click &lt;strong&gt;Attach policy&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_24.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Search and select the policy&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Search and select &lt;b&gt;AmazonDynamoDBFullAccess&lt;/b&gt; | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IoT Core&lt;/strong&gt; (found under the section “Internet of Things”)
&lt;img src=&quot;/images/20190622_1.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Services button on AWS Console&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IoT Core | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/20190622_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Core&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;IoT Core | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Act&lt;/strong&gt;
&lt;img src=&quot;/images/20190905_7.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Act button on IoT Core&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Act | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If you have not created a AWS IoT Rule before, click on “Create a rule”. Otherwise click “Create”.
&lt;img src=&quot;/images/20190905_8.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a rule (new user)&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a rule (new user) | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;img src=&quot;/images/20190905_9.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a rule (existing user)&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a rule (existing user) | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the rule (the &lt;em&gt;Name&lt;/em&gt; field). For the purposes of this tutorial, it will be named “dynamodb_rule”.
&lt;img src=&quot;/images/20190905_10.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Rule Name&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Name the rule whatever you want | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In the &lt;em&gt;Rule query statement&lt;/em&gt;, use this SQL statement:
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newuuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'another/topic/hello'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/20190905_11.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;SQL Query&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Put the SQL statement into the &lt;i&gt;Rule query statement&lt;/i&gt; field | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Add action&lt;/strong&gt; under the &lt;strong&gt;Set one or more actions&lt;/strong&gt; section.
&lt;img src=&quot;/images/20190905_12.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;SQL Actions&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on the Add Action button | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Check the &lt;strong&gt;Split message into multiple columns of a DynamoDB table (DynamoDBv2)&lt;/strong&gt; option, and scroll down to click &lt;strong&gt;Configure action&lt;/strong&gt; button.
&lt;img src=&quot;/images/20190905_13.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Option + Configure action button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Configure the action | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Select the corresponding &lt;em&gt;Table name&lt;/em&gt; created in step 4. Select the corresponding role created in step 11, by first clicking on &lt;strong&gt;Select&lt;/strong&gt;, then selecting the role with the subsequent &lt;strong&gt;Select&lt;/strong&gt; button. Finally, click &lt;strong&gt;Add action&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_14.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Select the correct table name and IAM role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Table name, and IAM role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Back on the rule creation wizard, click on &lt;strong&gt;Create rule&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_25.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create the rule&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create the rule | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-ni&quot;&gt;Step Ni&lt;/h3&gt;

&lt;p&gt;Now that the AWS services are setup properly, it is time to update the Arduino code. Replace (or selectively replace, if you know what you’re doing) the old code with new code from &lt;a href=&quot;https://gist.github.com/jameshi16/5846acdec40279028319c680fe8314b5&quot;&gt;this gist&lt;/a&gt;. Here is the summary of the changes made since the previous Arduino program:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Recieving a message from the subscription topic no longer echos to the publishing topic;&lt;/li&gt;
  &lt;li&gt;Button is programmed to send a message (a JSON object containing the state of the LED) to the publishing topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssid&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_hostname&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_sub_topic&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_pub_topic&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ca_certificate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_certificate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_privatekey&lt;/code&gt; are filled in correctly, as described in the &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;previous tutorial&lt;/a&gt;’s Step Dos.&lt;/p&gt;

&lt;p&gt;Plug in the ESP32, select the port, and upload. Open the serial console to see debugging information, if desired.&lt;/p&gt;

&lt;h3 id=&quot;step-san&quot;&gt;Step San&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go back to the AWS Console, and revisit &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;DynamoDB&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_2.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;DynamoDB is under the Database Section&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;DynamoDB | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Tables&lt;/strong&gt;
 &lt;img src=&quot;/images/20190905_26.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on tables&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;DynamoDB sidebar | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the table you created, and then click on the &lt;strong&gt;Items&lt;/strong&gt; tab.
 &lt;img src=&quot;/images/20190905_27.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;View items in the table&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;View items in the table | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the physical ESP32 device, press and release the ‘BOOT’ button once.
 &lt;img src=&quot;/images/20190905_28.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;The boot button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Press this button once | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the refresh icon, located on the top right of the DynamoDB items table. You should see a new entry. Try pressing the ‘BOOT’ button on the ESP32 device a couple more times to see new records coming in.
 &lt;img src=&quot;/images/20190905_29.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;The refresh button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;The refresh button | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Ensure that previous functionality of turning on / off the LED through the subscription topic still works.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-did-i-just-do&quot;&gt;What did I just do?&lt;/h1&gt;

&lt;p&gt;Now, you have a means to control a device, &lt;strong&gt;and&lt;/strong&gt; a means to get device information from the ESP32. If all you need is to store the state of IoT things, including the state history, AWS IoT provides a feature to do just that - it is known as “Shadow Document”, which allows an IoT device to be stateless while reporting information to AWS IoT, which can keep track of state. You can learn more about that &lt;a href=&quot;https://docs.aws.amazon.com/iot/latest/developerguide/device-shadow-document.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, for our application, we want to process data as it comes in; computing something from the device information so that we can control the said device. Hence, we don’t have a need for the Shadow Document; instead, we opted to use a database like DynamoDB. You can learn more about DynamoDB &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hence, we still have a missing step; the part where we process the data. (Part III? &lt;em&gt;wink wink&lt;/em&gt;)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;IoT is an important topic, and should be accessible to everyone. Studying IoT not only includes learning how to actually implement it, but includes other important aspects, such as security (our solution is not very secure, to make it easier to achieve certain steps), connectivity, and scaling.&lt;/p&gt;

&lt;p&gt;Do look out for Part III!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="aws" /><category term="aws" /><category term="iot" /><category term="mqtt" /><summary type="html">Finally, the long-awaited (2 months) part II is here!</summary></entry><entry><title type="html">Desktop in LXD Containters</title><link href="https://codingindex.xyz/2019/09/04/desktop-in-lxd-containers/" rel="alternate" type="text/html" title="Desktop in LXD Containters" /><published>2019-09-04T15:00:00+00:00</published><updated>2019-09-04T15:00:00+00:00</updated><id>https://codingindex.xyz/2019/09/04/desktop-in-lxd-containers</id><content type="html" xml:base="https://codingindex.xyz/2019/09/04/desktop-in-lxd-containers/">&lt;p&gt;Sometimes, when dabbling with technology, you want to know the limits, and how far you can push it before it becomes “too far”.&lt;/p&gt;

&lt;p&gt;If you’ve ever read the &lt;a href=&quot;/about/&quot;&gt;About me&lt;/a&gt; page, you would know that I am a privacy advocate. It means that I go the extra mile to ensure that no one else but myself knows everything about, well, myself. This is why containers are so intriguing to me; they essentially confine applications within a jail that is difficult to escape from, but yet still share the same kernelspace as my host system, giving it much less computing overhead compared to their Virtual Machine counterparts.&lt;/p&gt;

&lt;p&gt;This is very useful for developers; which is why applications like &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; exists. These containers ensure that they function exactly the same across all the platforms that can run Docker, eliminating the popular “but it works on my machine!” problem. Other than Docker, which containerizes applications, there are other more general-use container applications, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linux Containers (LXC)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LXD&lt;/code&gt;. One clear difference between Docker and LXC, would be the fact that by default, Docker spawns non-persistent containers, while LXC spawns persistent containers, making Docker useful to host applications that interact with an external database, but do not store state themselves (i.e. almost all applications I can think of). LXC, on the other hand, would be useful to create something like a development environment; containing tools such as compilers, interpreters, IDEs, text editors, and sometimes even Docker (container in container-ception!).&lt;/p&gt;

&lt;h3 id=&quot;how-i-have-been-using-lxd-containers&quot;&gt;How I have been using LXD Containers&lt;/h3&gt;

&lt;p&gt;For some people, it is an anti-thesis to computing to have all your tools so segregated. People like all their tools to be in one place, accessible anytime they command. However, I am an organizing freak when it comes to computers.&lt;/p&gt;

&lt;p&gt;All projects shall have their own containers - that is my philosphy. The host computer is nothing but a container orchestrator, with the sole purpose of managing the display, USB connections, networking with the outside world, et. cetera. This means that the bulk of my work is done in LXD containers; I even go the extra mile to use an external hard disk to store these containers, so that I can fully isolate even the storage hardware used for the containers.&lt;/p&gt;

&lt;p&gt;At the beginning of last year, I followed a &lt;a href=&quot;https://blog.simos.info/how-to-run-graphics-accelerated-gui-apps-in-lxd-containers-on-your-ubuntu-desktop/&quot;&gt;guide by Simos&lt;/a&gt; on how to allow LXD containers to run X11 applications on the host XOrg server. For a while, that was how I developed graphical applications using graphical IDEs; sometimes, GUIs cannot be avoided. Despite my longing to use the terminal for everything, reality is not all fun and games, meaning some work must be done via GUI.&lt;/p&gt;

&lt;p&gt;Simos’ guide had some gaping holes in security, however. In his guide, a user mapping is performed on the container to the host; meaning that the unprivileged user’s User ID (UID) in the container matched with the one on the host. In simpler terms, that means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu@host&lt;/code&gt; has the same user ID has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu@container&lt;/code&gt;. Should a process be able to escape the isolation provided by the container, the user in the container would have the &lt;strong&gt;same&lt;/strong&gt; permission as a normal user in the host, allowing the container’s malicious processes to affect files in the host filesystem, particularly the home directory.&lt;/p&gt;

&lt;p&gt;Let’s not talk about privileged containers; they’re just like user mapping, except that &lt;strong&gt;all&lt;/strong&gt; the users are mapped, including root (UID 0). &lt;a href=&quot;https://brauner.github.io/2019/02/12/privileged-containers.html&quot;&gt;Brauner’s blog&lt;/a&gt; explain what privileged containers are, and why they are dangerous, even including a link to a &lt;a href=&quot;https://seclists.org/oss-sec/2019/q1/119&quot;&gt;vulnerability report, CVE-2019-5736&lt;/a&gt;. In essence, the only security one would have left are the confines of a chroot jail and apparmor (alongside other techniques, read more about them in Brauner’s blog).&lt;/p&gt;

&lt;p&gt;The other gaping hole exists in the fact that both the container and the host would share the same XOrg server, meaning that if the container had a keylogger, or a clipboard monitor, and the container is connected to the host via X11, any keystroke performed within the XOrg server (i.e. any application within the host &lt;em&gt;and&lt;/em&gt; client) can be stored and used for malicious purposes.&lt;/p&gt;

&lt;p&gt;Of course, this would not be an issue if you were to trust the applications within the privileged containers; if you aren’t testing untrusted programs or just generally don’t trust anything at all, forwarding your X11 server using Simos’ method is a viable option to organize your applications and development environments. For a while, I was contend with that; as long as it stayed within the container, I could, at any moment, export and subsequently delete the container. Other than the standard container advantages, this also allowed me to separate configurations for the same application between the containers; for example, I can have a newer version of CUDA tookit installed on my host, but a different version of CUDA tookit installed in the container, without the container’s tookit conflicting with my host toolkit; I could also compile a newer version of Clang just for a container without the older compiler available on my host, and the list goes on.&lt;/p&gt;

&lt;p&gt;However, as my requirements increased together with my workload, I found this solution to be insufficient. I found myself often times requiring to forward ports from my container just so that I can access certain features within the container; then I found myself requiring to reset cookies often so that my webapp that integrates with many services can have a fresh state to work on; while other times, I wouldn’t want to reset it (incognito would not cut it, as I would need to recreate those cookies every browser restart); then I found myself just generally wishing I had file browsers, dedicated terminals for my containers etc. As my requirements grew, so did the number of tabs on my terminal emulator, until one day, I decided it was the end of the XOrg sharing era.&lt;/p&gt;

&lt;h3 id=&quot;containertop&quot;&gt;ContainerTop&lt;/h3&gt;

&lt;p&gt;After my examinations, I took a few days to develop &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;ContainerTop&lt;/a&gt; - a creatively named project to create containers that hosts their own desktop environments, on their own XOrg servers, complete with hardware graphics acceleration (meaning you can play 3D games on it), sound forwarding, and native processing speed minus the typical container overhead (not much).&lt;/p&gt;

&lt;p&gt;“What about Virtual Machines? Like virt, VirtualBox and VMWare?” - To get &lt;strong&gt;hardware&lt;/strong&gt; graphics accleration, you need to do PCI passthrough. To perform PCI passthrough on a single GPU device, you need to edit the graphics controller’s ROM, which is a risk not many people want to take. Plus, virtual machine overhead includes emulating the kernel, which is a big, big overhead.&lt;/p&gt;

&lt;p&gt;“Okay, why not go with Xpra/Xrdp/X2GO/SSH X11 Forwarding?” - Same problems as I mentioned in the above section.&lt;/p&gt;

&lt;p&gt;“But, Xpra/X2Go can host desktop environments too!” - The overhead is quite substantial in this setup; first, there is the connection. Between the SSH, TCP and NX protocols, the NX protocol is arguably the fastest protocol available out there. Even with NX protocol’s superiority, the overhead and hence latency is noticeable. Secondly, there is also image compression. To get acceptable image quality (16k-png) on a local connection (remember, the container is on localhost), the amount of stutter while watching videos is surprisingly unbearable. As much as possible, I would not like to switch between the container and the host while working on a project, because everything I need should be already inside the project container, in one workspace. Hence, being able to watch videos (useful for learnings things on the spot) is an absolute requirement, which leaves Xpra and X2Go unusable. Of course, if all that is needed is a desktop environment for the sole purpose of development and nothing else, Xpra and X2Go provides fantastic speeds and quality (I tested it during these few days of implementing ContainerTop), with Xpra even supporting VirtualGL, so you can install desktop environments on a beefy server, and then use a Thin Client to access it, while maintaining the capabilities required for 3D accelerated programs like FreeCAD with a reasonable latency.&lt;/p&gt;

&lt;p&gt;“AWS, Google Cloud, Alibaba Cloud…” - Any cloud service would have too much latency for my tastes. Also, same problem as the above paragraph.&lt;/p&gt;

&lt;p&gt;To use ContainerTop, all applications that uses XOrg must be killed, so that the video card is free from any usage. Then, the container’s XOrg server is booted, which will take control of the video card and start displaying content. This is all done on an unprivileged and unmapped container; and only the required devices are passed through; things like the video card, mouse and keyboard. Brightness and sound are passed through via a different method, without giving the container direct access to those functionalities.&lt;/p&gt;

&lt;p&gt;You can find out more, and even try ContainerTop for yourselves &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;here&lt;/a&gt;. Please note that you will need an afternoon to set things up properly, so do it only when you are free!&lt;/p&gt;

&lt;p&gt;With ContainerTop, I can (finally) have an isolated workspace for any projects I’m working on, with the added bonus of LXD’s container management capabilities, including taking snapshots of the container for rollback, export and publishing purposes, and deleting the containers anytime I no longer need them. It’s the most perfect solution for me.&lt;/p&gt;

&lt;h3 id=&quot;problems-encountered-while-developing-containertops-first-version&quot;&gt;Problems encountered while developing ContainerTop’s first version&lt;/h3&gt;

&lt;p&gt;Long section title, I know.&lt;/p&gt;

&lt;p&gt;You didn’t expect me to write a blog post claiming I had absolutely no problems developing ContainerTop did you? :smirk:&lt;/p&gt;

&lt;p&gt;It’s all about the learning experience.&lt;/p&gt;

&lt;p&gt;Anyway, developing the desktop switching part of ContainerTop on my particular setup created many, many problems. The desktop switching script (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;desktop_enter.sh&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;desktop_enter_vt.sh&lt;/code&gt;) is in charge of setting the correct permissions, killing the host’s login manager and starting the login manager on the container. Let me explain the problems, and how I solved them, and how that created even more problems.&lt;/p&gt;

&lt;p&gt;Firstly, my external harddrive is encrypted, and I made it a policy to manually decrypt it everytime I want to use it. As such, I first tried to make a userspace script (i.e. to be run logged into GNOME session on Ubuntu), with fancy script hooks to my encryption/decryption script, switching the user around terminals, et cetera. The problem was that the TTY spawned by the script to run the child process of the aforementioned script was not persistent; after a certain time period, the script will just magically cease to work.&lt;/p&gt;

&lt;p&gt;I tried to find the cause of the issue, and figured out that killing the login manager also probably tries to kill all the child processes spawned from it, and my script was one of those children. I took about two days to come to this conclusion after many, many hours experimenting.&lt;/p&gt;

&lt;p&gt;Giving up on the userspace script, I decided to write a script that required a virtual terminal to run. This is how the user would interact with this new script: Logout of GNOME session -&amp;gt; See login screen -&amp;gt; Press CTRL+ALT+F&amp;lt;num&amp;gt; to switch to a free terminal -&amp;gt; Run the desktop switching script. Once I got that working with the container I manually constructed to model subsequent containers after, I added the brightness script, which was written using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;evtest&lt;/code&gt; on the host so that the container cannot get malicious access to it programmatically (i.e. can cause epilepsy by flashing the screen fast enough). And then I tried to write a PulseAudio script.&lt;/p&gt;

&lt;p&gt;Turns out, PulseAudio was yet another brick wall. For those uninitiated, PulseAudio is how most Linux distro handles sound, and is run on a per-user basis. Typically, that is great, but in the context of Virtual Terminals (TTYs), this is bad news. If you have free time, you should try it; first, grab a random &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.wav&lt;/code&gt; file, and play it on any virtual terminal using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paplay soundfile.wav&lt;/code&gt; (maybe on tty3). Then, switch your terminal using CTRL+ALT+F&amp;lt;num&amp;gt;. Your music file should stop playing. That’s how PulseAudio handles sound; only the current active Virtual Terminal gets to play sound. Since ContainerTop’s desktop switching script uses a different TTY for display than the TTY used to run the script, this means that I cannot forward PulseAudio’s sound while it’s running in user mode.&lt;/p&gt;

&lt;p&gt;Back then, I didn’t know &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--system=TRUE&lt;/code&gt; was a thing; so it took me another two days of pure trial and error (with options not related to PulseAudio) to figure out that I needed to run PulseAudio in system mode, which the PulseAudio devs dub as a bad idea :tm:. If you can, try it for yourself; run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulseaudio --system=TRUE&lt;/code&gt;, do the same playing of the music file thing, and then switch terminals. You’ll notice that the sound continues to play. That is a good sign.&lt;/p&gt;

&lt;p&gt;Hence, using that new found knowledge, all I needed to do to forward PulseAudio to the container, is to enable PulseAudio’s native TCP module, and copy the pulse cookie into the container; this is all done in the PulseAudio script under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules/&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;p&gt;I then wrote the container creation script, referring to the model container to see what was required. It may sound all good, but here’s the catch: I’ve fiddled with the model container, to try and find the most optimal configuration, meaning that there may be some additional packages, unrequired configurations, etc that lay residue inside the container. Hence, when the container created from the container creation script didn’t work, I was left very confused and frustrated, because I thought I copied almost all aspects of the model container.&lt;/p&gt;

&lt;p&gt;After another set of countless hours fiddling with the container configuration files, I finally arrived at a conclusion: the LightDM’s greeter was the main cause.&lt;/p&gt;

&lt;p&gt;“Huh?”&lt;/p&gt;

&lt;p&gt;LightDM can be customized with what is known as greeters; they change the background slightly, maybe move the login panel to the center, has more/less widgets, et cetera. When I first checked the logs for the greeter, there was a line that basically said:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
the greeter executable - screen is 0,0, drawing 0,0 login screen
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Note: not the actual log&lt;/p&gt;

&lt;p&gt;This of course looked off, but I didn’t attribute it to the greeter at first; because I mean, all greeters basically do the same thing, right?&lt;/p&gt;

&lt;p&gt;I only gave changing the greeter to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unity-greeter&lt;/code&gt; a try when I have exhausted all the other options, and to my surprise, it worked! Checking the logs, it seems like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unity-greeter&lt;/code&gt; was able to detect the screen resolution, leaving me, an ex-convict of the confusion prision, jumping for joy. Up to now, I still have no idea why the previous greeter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slick-greeter&lt;/code&gt;) didn’t work - I thought of manually configuring them, but at that point I just wanted the screen to display something from the container.&lt;/p&gt;

&lt;p&gt;There were also the problems of how the script can be easily terminated, and malicious attackers with physical access to the computer can simply do so to gain user account access, which I solved by killing the bash process of the TTY the script is in once it terminates, requiring any users to log in again to use the Virtual Terminal.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There are still some quirks that I intend to iron out, and new features I want to implement to make my life inside the container much easier for myself. Working on ContainerTop has taught me quite a lot of things, including how maintainers think, and how to debug issues when you’re no longer within a desktop environment. Please check out the &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;ContainerTop&lt;/a&gt; project, and try it out on your free time!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;Coding Index&lt;/p&gt;</content><author><name>James</name></author><category term="lxd" /><category term="containers" /><category term="desktop" /><category term="linux" /><category term="lxd" /><category term="containers" /><category term="desktop" /><category term="linux" /><category term="ubuntu" /><category term="x11" /><category term="pulseaudio" /><summary type="html">Sometimes, when dabbling with technology, you want to know the limits, and how far you can push it before it becomes “too far”.</summary></entry><entry><title type="html">Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part I)</title><link href="https://codingindex.xyz/2019/06/22/mqtt-aws-iot-dynamodb-part-1/" rel="alternate" type="text/html" title="Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part I)" /><published>2019-06-22T12:00:00+00:00</published><updated>2019-06-22T12:00:00+00:00</updated><id>https://codingindex.xyz/2019/06/22/mqtt-aws-iot-dynamodb-part-1</id><content type="html" xml:base="https://codingindex.xyz/2019/06/22/mqtt-aws-iot-dynamodb-part-1/">&lt;p&gt;You read the title, let’s get started. For this tutorial, we will be using the &lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;Arduino IDE&lt;/a&gt;. This should be possible with &lt;a href=&quot;https://github.com/espressif/esp-idf&quot;&gt;ESP-IDF&lt;/a&gt;, too, because &lt;a href=&quot;https://github.com/espressif/esp-mqtt&quot;&gt;ESP-MQTT&lt;/a&gt; is included as part of the ESP-IDF.&lt;/p&gt;

&lt;h1 id=&quot;tested-on&quot;&gt;Tested on&lt;/h1&gt;
&lt;p&gt;This tutorial was created on Ubuntu 18.04.&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;Before the tutorial begins, please download the following pre-requisites (the version numbers are the versions used to create this tutorial):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino IDE&lt;/a&gt; - 1.8.9&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python&lt;/a&gt; - 3.6.8&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;setting-up-prerequisites&quot;&gt;Setting up prerequisites&lt;/h1&gt;
&lt;h2 id=&quot;arduino-ide&quot;&gt;Arduino IDE&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download the &lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;Arduino IDE&lt;/a&gt; if you don’t already have it.&lt;/li&gt;
  &lt;li&gt;Start Arduino, then select &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;Preferences&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_21.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;File &amp;gt; Preferences&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;File &amp;gt; Preferences | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Under ‘Additional Board Manager URLs’, add this URL: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://dl.espressif.com/dl/package_esp32_index.json&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_22.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Add a board manager url&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Adding a board manager url | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Goto &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Board&lt;/strong&gt; &amp;gt; &lt;strong&gt;Boards Manager&lt;/strong&gt; and type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esp32&lt;/code&gt; on the search bar. You should find the esp32 package. Install version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0.2&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_23.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Tools &amp;gt; Board &amp;gt; Boards Manager&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Board Manager | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_24.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Board Manager ESP32 Package&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;ESP32 Package | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Goto &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Manage Libraries&lt;/strong&gt;. Then, search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PubSubClient&lt;/code&gt;, and install version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.7.0&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_25.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Tools &amp;gt; Manage Libraries&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Manage Libraries | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_26.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Install PubSubClient&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Install PubSubClient library | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Board&lt;/strong&gt; &amp;gt; &lt;em&gt;ESP32 Dev Module&lt;/em&gt;. Leave all new options to their default settings.
 &lt;img src=&quot;/images/20190622_27.jpg&quot; style=&quot;max-width: 500px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Tools &amp;gt; Board &amp;gt; ESP32 Dev Module&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on it to change the board | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Run through all the installation steps for Python. If you are on Ubuntu, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install python python-serial&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;linking-up-esp32-to-aws-iot&quot;&gt;Linking up ESP32 to AWS IoT&lt;/h1&gt;
&lt;h2 id=&quot;step-uno&quot;&gt;Step Uno&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IoT Core&lt;/strong&gt; (found under the section “Internet of Things”)
 &lt;img src=&quot;/images/20190622_1.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Services button on AWS Console&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on Services | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Core&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;IoT Core | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, goto &lt;strong&gt;Secure&lt;/strong&gt; &amp;gt; &lt;strong&gt;Policies&lt;/strong&gt;, and click on “Create a Policy” or “Create”, depending on which one is present.
 &lt;img src=&quot;/images/20190622_3.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Policy&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create IoT Policy | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_4.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Alternate IoT Policy&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;If you already have policies, use this button instead | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A wizard should appear. Name your policy through the &lt;em&gt;Name&lt;/em&gt; field, key in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot:*&lt;/code&gt; into the &lt;em&gt;Action&lt;/em&gt; field, key in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; under the &lt;em&gt;Resource ARN&lt;/em&gt; field, and finally, check the ‘Allow’ box under &lt;em&gt;Effect&lt;/em&gt;. Should you wish to restrict your policy more for higher security, or prevent other &lt;em&gt;authorized&lt;/em&gt; (yes, &lt;em&gt;authorized&lt;/em&gt;) users from using your topic, please refer to &lt;a href=&quot;https://docs.aws.amazon.com/iot/latest/developerguide/iot-policies.html&quot;&gt;this AWS Documentation&lt;/a&gt; to construct your own policy. After checking your fields, press &lt;strong&gt;Create&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_5.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Wizard options&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Values for the wizard | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, goto &lt;strong&gt;Manage&lt;/strong&gt; &amp;gt; &lt;strong&gt;Things&lt;/strong&gt;, and click on “Register a thing” or “Create” depending on which one is present.
 &lt;img src=&quot;/images/20190622_6.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on Create | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_7.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Register a thing&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Or click on Register a Thing | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on “Create a single thing”.
 &lt;img src=&quot;/images/20190622_8.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a single thing&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a single thing | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name your thing whatever you want, and click &lt;strong&gt;Next&lt;/strong&gt; at the bottom of the page.
 &lt;img src=&quot;/images/20190622_9.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Name and Create&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Name your thing, and press create | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;One-click certificate creation (recommended)&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_10.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;One click certificate creation&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Certificate Creation | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;After a while, the wizard should generate a certificate. Download the certificate, and the private key. Also, get the root CA, here is a &lt;a href=&quot;https://www.amazontrust.com/repository/AmazonRootCA1.pem&quot;&gt;direct link&lt;/a&gt; to it. Make sure to activate the certificate before clicking &lt;strong&gt;Attach a policy&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_11.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Download certificate, private key, CA&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Download the cert, private key, CA cert, and activate before continuing. | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Find your policy in the search box, and select it. Then, click &lt;strong&gt;Register Thing&lt;/strong&gt;.
&lt;img src=&quot;/images/20190622_12.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Select then register thing&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Register thing | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click into the thing you have created.
&lt;img src=&quot;/images/20190622_14.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click into thing&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click into the thing you created | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Interact&lt;/strong&gt;.
&lt;img src=&quot;/images/20190622_15.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on interact&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Caption&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Note down the HTTP Endpoint (both MQTT and HTTP share the same endpoint).
&lt;img src=&quot;/images/20190622_16.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Note this down&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Note down the endpoint | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click the grey back arrow in the page and click on &lt;strong&gt;Test&lt;/strong&gt; in the sidebar. You should see the MQTT Client as shown below. Keep this window open, and proceed to Step Dos.
&lt;img src=&quot;/images/20190622_13.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;MQTT Client&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;MQTT Client on AWS IoT Console | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-dos&quot;&gt;Step Dos&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Arduino IDE / Switch to the Arduino IDE.&lt;/li&gt;
  &lt;li&gt;Completely replace all the code in the IDE with code &lt;a href=&quot;https://gist.github.com/jameshi16/7f277bb8dfecf38a30aea0093f30477a&quot;&gt;from this gist&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Fill in the configuration options by editing the content within the double quotes (&quot;):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSID&lt;/code&gt;: The SSID of the access point to connect to.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password&lt;/code&gt;: The password of the access point to connect to.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_hostname&lt;/code&gt;: The hostname you noted down during Step Uno.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_sub_topic&lt;/code&gt;: The topic this device should subscribe to. For this tutorial, we’ll use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topic/hello&lt;/code&gt;, however, when following the tutorial with your friends, please have &lt;em&gt;unique&lt;/em&gt; topics.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_pub_topic&lt;/code&gt;: The topic this device should publish to. For this tutorial, it’ll be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;another/topic/hello&lt;/code&gt;, however, when following the tutorial with your friends, please have &lt;em&gt;unique&lt;/em&gt; topics.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ca_certificate&lt;/code&gt;: Copy the contents of the CA certificate you downloaded (file should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AmazonRootCA1.pem&lt;/code&gt;) using any text editor like Notepad or Vim, and paste it into the textbox located below this list. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make into C++ String&lt;/code&gt;, and copy the contents of the textbox into the configuration option.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_certificate&lt;/code&gt;: Copy the contents of the certificate you downloaded (file should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-certificate.pem.crt&lt;/code&gt;) using any text editor like Notepad or Vim, and paste it into the textbox located below this list. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make into C++ String&lt;/code&gt;, and copy the contents of the textbox into the configuration option.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_privatekey&lt;/code&gt;: Copy the contents of the private key you downloaded (file should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-private.pem.key&lt;/code&gt;) using any text editor like Notepad or Vim, and paste it into the textbox located below this list. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make into C++ String&lt;/code&gt;, and copy the contents of the textbox into the configuration option.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;form action=&quot;javascript:void(0)&quot; onsubmit=&quot;magicTextTransformer()&quot; style=&quot;margin: 0 auto; max-width: 800px; width: 50%&quot;&gt;
     &lt;textarea id=&quot;transformee&quot; style=&quot;width: 100%; height: 100px&quot; /&gt;&lt;br /&gt;
      &lt;input type=&quot;submit&quot; value=&quot;Make into C++ String&quot; style=&quot;float: right;&quot; /&gt;
 &lt;/form&gt;

    &lt;script type=&quot;application/javascript&quot;&gt;
     function magicTextTransformer() {
         text = document.getElementById('transformee').value;
         document.getElementById('transformee').value = text.replace(/\n/g, '\\n');
     }
 &lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;Plug in your ESP32 now.&lt;/li&gt;
  &lt;li&gt;Select the port by going into &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Port&lt;/strong&gt; &amp;gt; COMX or /dev/ttyUSBX, where X is the port to your ESP32.&lt;/li&gt;
  &lt;li&gt;Click on Upload.&lt;/li&gt;
  &lt;li&gt;[Optional] Launch the serial console to see debugging infomration.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-tres&quot;&gt;Step Tres&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Go back to the window highlighted in the last step of Step Uno.&lt;/li&gt;
  &lt;li&gt;For this tutorial, fill in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;another/topic/echo&lt;/code&gt; in the &lt;em&gt;Subscription topic&lt;/em&gt; textbox, and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subscribe to topic&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_17.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Subscribe topic&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Subscribe to the topic | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;For this tutorial, fill in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topic/hello&lt;/code&gt; in the &lt;em&gt;Publish&lt;/em&gt; textbox, and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish to topic&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_18.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Publish to topic&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Publish to the topic | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If you have done everything correctly so far, you should see a new message popup below the publish block, which is echoed from the device. If you have have your serial console up, you can also see that the message has reached your ESP32.
 &lt;img src=&quot;/images/20190622_19.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Recieved message from ESP32 echo&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;An echo from the ESP32 on AWS IoT | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_20.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;What the ESP32 recieves&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Serial Console | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Clear the text field that contains the JSON, and try publishing either 1 or 0, and observe the ESP32 closely per published message.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;code-explanation&quot;&gt;Code explanation&lt;/h1&gt;

&lt;p&gt;The code contains the absolute (mostly) minimal code required to perform MQTT Pub/Sub with AWS IoT MQTT endpoints. Other than the MQTT client verifying the server’s identity, AWS also requires that all clients be authenticated with client certificates. Hence, the following lines:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCACert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ca_certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iot_certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPrivateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iot_privatekey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;are responsible for setting the required certificates for communication.&lt;/p&gt;

&lt;p&gt;Publishing is done like so:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aws_iot_pub_topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aws_iot_pub_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And subscribing is done like so:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aws_iot_sub_topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//subscribe to the topic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do note that for subscribing, you must provide a callback function with the signature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void callback(const char* topic, byte* payload, unsigned int length)&lt;/code&gt;. This callback will be called by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PubSubClient&lt;/code&gt; library whenever there is a new message from the subscribed topics.&lt;/p&gt;

&lt;p&gt;MQTT typically uses port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1883&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8883&lt;/code&gt;. AWS IoT only uses port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8883&lt;/code&gt;, because it uses MQTT over SSL (MQTTS), hence the line:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aws_iot_hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8883&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Hope you enjoyed the tutorial. In part two of this two-parter tutorial, we will be adding a policy that will pipe whatever our ESP32 publishes to AWS IoT into DynamoDB. Until then,&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="aws" /><category term="aws" /><category term="iot" /><category term="mqtt" /><summary type="html">You read the title, let’s get started. For this tutorial, we will be using the Arduino IDE. This should be possible with ESP-IDF, too, because ESP-MQTT is included as part of the ESP-IDF.</summary></entry></feed>