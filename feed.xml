<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://codingindex.xyz/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codingindex.xyz/" rel="alternate" type="text/html" /><updated>2020-07-25T09:12:29+00:00</updated><id>https://codingindex.xyz/feed.xml</id><title type="html">CodingIndex’s Random Shenanigans</title><subtitle>A (human) index that likes to code. Also drinks way too much coffee.</subtitle><author><name>James</name></author><entry><title type="html">Angular CI/CD with GitHub Actions</title><link href="https://codingindex.xyz/2020/05/27/angular-cicd-with-github-actions/" rel="alternate" type="text/html" title="Angular CI/CD with GitHub Actions" /><published>2020-05-27T09:00:00+00:00</published><updated>2020-05-27T09:00:00+00:00</updated><id>https://codingindex.xyz/2020/05/27/angular-cicd-with-github-actions</id><content type="html" xml:base="https://codingindex.xyz/2020/05/27/angular-cicd-with-github-actions/">&lt;p&gt;Recently, I needed to setup a functional CI/CD pipeline for an Angular Project. Given how hard GitHub has been pushing their “GitHub Actions” feature, I decided to give it a try. Here is how to setup CI/CD for an fresh Angular project on GitHub.&lt;/p&gt;

&lt;h1 id=&quot;step-0-concepts&quot;&gt;Step 0: Concepts&lt;/h1&gt;

&lt;p&gt;GitHub workflows uses GitHub actions, and GitHub actions are ideally public repositories that are published on the Marketplace. As of writing, first-class support for private GitHub repository actions &lt;a href=&quot;https://github.com/actions/checkout/issues/95&quot;&gt;does not exist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are three main ways around it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Git Submodules,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.community/t5/GitHub-Actions/Github-action-action-in-private-repository/m-p/54341/highlight/true#M9141&quot;&gt;Cloning the action with an access token on run&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-using-action-in-the-same-repository-as-the-workflow&quot;&gt;Local GitHub actions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are two types of GitHub Actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker container or,&lt;/li&gt;
  &lt;li&gt;JavaScript.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main difference between the two actions is that JavaScript actions should not call other executables (i.e. not dependent on specific executables), while Docker container actions can (because they are containers).&lt;/p&gt;

&lt;p&gt;For this blog post, I’ll use local Docker container GitHub actions for both CI and CD. The below represents a logical architecture of what I’m gonna setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20200527_1.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Logical Architecture&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Logical architecture | Source: Me&lt;/p&gt;

&lt;h1 id=&quot;step-1-installing-the-github-actions-runner&quot;&gt;Step 1: Installing the GitHub Actions runner&lt;/h1&gt;

&lt;p&gt;As I’m setting up GitHub Actions for a private repository, I decided to use a self-hosted GitHub actions runner, since I have an unused VPS server lying around doing nothing. At the time of writing, a self-hosted GitHub actions runner is not required, as GitHub’s Free Plan gives 2,000 action minutes per month for private repositories which seems enough for a few small projects.&lt;/p&gt;

&lt;p&gt;Installing the GitHub Actions runner can be easily done by following the instructions on &lt;a href=&quot;https://help.github.com/en/actions/hosting-your-own-runners/adding-self-hosted-runners&quot;&gt;this GitHub help page&lt;/a&gt;. A unit service can then be created by following the instructions on &lt;a href=&quot;https://help.github.com/en/actions/hosting-your-own-runners/configuring-the-self-hosted-runner-application-as-a-service&quot;&gt;this other GitHub help page&lt;/a&gt;, although I wrote mine manually just for giggles.&lt;/p&gt;

&lt;p&gt;If you’re using Docker container actions, ensure that the environment has Docker installed, and is accessible by the user running the GitHub action runner. If you’re using Javascript actions, you &lt;em&gt;should&lt;/em&gt; install &lt;a href=&quot;https://github.com/actions/toolkit&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions/toolkit&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After following the steps properly, I observe that the runner pops up in my settings page:
&lt;img src=&quot;/images/20200527_2.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Self-hosted GitHub Runner&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Self-hosted GitHub Runner | Source: Me&lt;/p&gt;

&lt;p&gt;I also added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vps&lt;/code&gt; tag, but it’s not really useful when I only have one self-hosted runner. Tagging can help GitHub workflows to differentiate between machines; for example, only distributing the GPU-intensive workflow to GPU-capable machines.&lt;/p&gt;

&lt;h1 id=&quot;step-2-continuous-integration&quot;&gt;Step 2: Continuous Integration&lt;/h1&gt;

&lt;p&gt;When developers make changes to the codebase, they generally want to ensure that the incoming code is high quality and maintainable. This usually involves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stringent Pull Request reviews&lt;/li&gt;
  &lt;li&gt;An automation process checking for the following things:
    &lt;ol&gt;
      &lt;li&gt;Is it buildable?&lt;/li&gt;
      &lt;li&gt;Is it good on the lint?&lt;/li&gt;
      &lt;li&gt;Are the tests passing?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Angular has a few straightforward CLI commands that can test for code quality, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng build&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng lint&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng test &amp;amp;&amp;amp; ng e2e&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hence, all I need to do now is to translate our CLI commands into a GitHub action. Luckily, &lt;a href=&quot;https://github.com/colbyhill21/angular-full-ci&quot;&gt;colbyhill21 has already made a full CI action for Angular&lt;/a&gt;, which is easy to integrate into your own GitHub workflow.&lt;/p&gt;

&lt;p&gt;However, I decided to reinvent the wheel, because I’m bored and have nothing better to do. Furthermore, understanding how the black box works speeds up debugging issues pertaining to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng test&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng e2e&lt;/code&gt;, which I experienced while writing this blog post.&lt;/p&gt;

&lt;p&gt;Let’s create the directories required for our local Github action.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .github/actions/angular-ci
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puppeteer&lt;/code&gt; (for unit testing &amp;amp; end-to-end testing) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@angular/cli&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-ci/Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:12-slim&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-in-docker&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; wget gnupg procps &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo &quot;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&quot; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get update &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; google-chrome-unstable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;      &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install Angular CLI&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unsafe-perm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--allow-root&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli puppeteer

&lt;span class=&quot;c&quot;&gt;# Entrypoint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; entrypoint.sh /entrypoint.sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /entrypoint.sh
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/entrypoint.sh&quot;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This tells docker to build an image that has the environment to run Angular CLI commands for testing. Next, I create a GitHub action, and tell it to run the Docker image. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-ci/action.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Angular&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CI'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Runs&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;commands'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dockerfile'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running Angular tests implies some level of interaction with the browser - since I don’t have GUI access to the browser when a GitHub action is running, I configured the tests to run on a headless browser. Firstly there’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;karma.conf.js&lt;/code&gt;, the configuration file for Angular’s unit testing framework:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ChromeHeadless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ChromeHeadlessCI&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;customLaunchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;ChromeHeadlessCI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ChromeHeadless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--no-sandbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--disable-translate&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--disable-extensions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--remote-debugging-port=9223&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, I re-configured &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./e2e/protractor.conf.js&lt;/code&gt;, the end-to-end testing framework:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;capabilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;goog:chromeOptions&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--no-sandbox&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--headless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--disable-gpu, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;]
        }
    }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The testing frameworks now use headless browsers to perform their tests, which allows me to do testing in a Docker container, and consequently, in the GitHub action runner.&lt;/p&gt;

&lt;p&gt;With a GitHub action and a properly configured project, I can now configure a GitHub workflow, which is kinda like an “main” file to our actions. The workflow allows me to instruct GitHub to perform certain GitHub actions on certain repository events, like pushes or pull request activity. First, I create the necessary folders:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .github/workflows
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I populate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/main.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self-hosted&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout repository&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run CI&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/actions/angular-ci&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on: [self-hosted, linux]&lt;/code&gt; line is necessary for me to select the right GitHub actions runner. You can replace that line with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runs-on: ubuntu-latest&lt;/code&gt; if you’re using GitHub’s runners at the cost of your plan’s GitHub action minutes.&lt;/p&gt;

&lt;h1 id=&quot;step-3-continuous-deployment&quot;&gt;Step 3: Continuous Deployment&lt;/h1&gt;

&lt;p&gt;Continuous Deployment is slightly easier; all I needed to do is to build, copy and paste everything in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist/project_name&lt;/code&gt; (replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project_name&lt;/code&gt; with your Angular project name) into a folder on my web server.&lt;/p&gt;

&lt;p&gt;Let’s reuse the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular-ci&lt;/code&gt; action by copying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-ci&lt;/code&gt;, to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd/action.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Angular&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CD'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sshkey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;SSH&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;address'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;knownhosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;identify&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;server'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dockerfile'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.sshkey } }&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.user }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.host }}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ inputs.knownhosts }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I required myself to deploy via SSH safely. This means two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SSH Keys for authentication and,&lt;/li&gt;
  &lt;li&gt;Specifying the web server’s host keys to ensure its identity.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hence, I introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action.yml&lt;/code&gt; file, allowing the workflow to specify the SSH key and Host keys. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputs&lt;/code&gt; is a method to specify parameters that can be used throughout the execution of the action; they will appear as environment variables prefixed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INPUT_&lt;/code&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshkey&lt;/code&gt; will be exposed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$INPUT_SSHKEY&lt;/code&gt; during the execution of the action.&lt;/p&gt;

&lt;p&gt;To ensure no Man-In-The-Middle attacks happen, I decided to specify host keys too. Essentially, we identify the production machine on our location machine first:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keyscan &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &amp;lt;your &lt;span class=&quot;nb&quot;&gt;hostname &lt;/span&gt;here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we store the result into a GitHub secret (found under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings &amp;gt; Secrets &amp;gt; Add secret&lt;/code&gt;):
&lt;img src=&quot;/images/20200527_3.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Host key secret&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Add the host key secret | Source: Me&lt;/p&gt;

&lt;p&gt;While I’m specifying the secrets, I might as well generate the private key secret on the web server too:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# THIS IS ON THE WEB-SERVER&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/ubuntu/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;test.
Your public key has been saved &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;test.pub.
The key fingerprint is:
SHA256:GCVhv6Of2eOpPzfwlBMi4ohzuBiSFjdOdVX/xaA7IsE ubuntu@Desktop
The key&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;s randomart image is:
+---[RSA 3072]----+
|      +.o...  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  |
|     o &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;    .. o |
|    &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; o E   ..  o|
| &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; +  .o.o. ... .|
| .&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;o.o..S...oo &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; |
|+.+.o .. o..+.   |
|oo +  &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;    + &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;   |
|. &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; +o.+    |
|        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;   |
+----[SHA256]-----+
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /home/ubuntu/.ssh/id_rsa
&amp;lt;private key contents&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, store the result into a GitHub secret:
&lt;img src=&quot;/images/20200527_4.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Private key secret&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Add the private key secret | Source: Me&lt;/p&gt;

&lt;p&gt;Now I have two secrets.
&lt;img src=&quot;/images/20200527_5.png&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Secrets...&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Two secrets | Source: Me&lt;/p&gt;

&lt;p&gt;Now, I configure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt; files under the new action.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd/Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:12-slim&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install SSH and SCP&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ssh

&lt;span class=&quot;c&quot;&gt;# Install Angular CLI&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--unsafe-perm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--allow-root&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli puppeteer

&lt;span class=&quot;c&quot;&gt;# Entrypoint&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; entrypoint.sh /entrypoint.sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /entrypoint.sh
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/entrypoint.sh&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/angular-cd/entrypoint.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;======[ Dependencies ]======&quot;&lt;/span&gt;
npm &lt;span class=&quot;nb&quot;&gt;install

echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;======[ Build ]======&quot;&lt;/span&gt;
ng build &lt;span class=&quot;nt&quot;&gt;--prod&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.ssh
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT_KNOWNHOSTS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.ssh/known_hosts
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;644 &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.ssh/known_hosts
ssh-add &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INPUT_SSHKEY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ssh &lt;span class=&quot;nv&quot;&gt;$INPUT_USER&lt;/span&gt;@&lt;span class=&quot;nv&quot;&gt;$INPUT_HOST&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rm -rf /var/www/html/*&quot;&lt;/span&gt;
scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; dist/project_name_here/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INPUT_USER&lt;/span&gt;@&lt;span class=&quot;nv&quot;&gt;$INPUT_HOST&lt;/span&gt;:/var/www/html/.
ssh-agent &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; node_modules/
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; dist/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; installs the required pre-requisites, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt; file builds the project and copies the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist/project_name/*&lt;/code&gt; into the deployment folder.&lt;/p&gt;

&lt;p&gt;Finally, I create a workflow to utilize our action:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows/deploy.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;self-hosted&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Checkout repository&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run Continuous Deploy&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/actions/angular-cd&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;sshkey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.SSH_KEY }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PUT_YOUR_SSH_USER_HERE&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PUT_YOUR_HOST_HERE&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;knownhosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.KNOWN_HOSTS }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular-cd&lt;/code&gt; action requires some inputs, I specified it in this workflow. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets&lt;/code&gt; accesses the encrypted secrets configured earlier, which is then passed to the GitHub action runner to complete its job.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Done! After committing, pushing and creating a PR, the workflows should kick into action immediately, checking the repository for lint, build and test errors. After merging the PR into master, it should trigger the deploy workflow, and your code will be automagically deployed.&lt;/p&gt;

&lt;p&gt;Happy coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="fluff" /><category term="angular" /><category term="cicd" /><category term="github" /><summary type="html">Recently, I needed to setup a functional CI/CD pipeline for an Angular Project. Given how hard GitHub has been pushing their “GitHub Actions” feature, I decided to give it a try. Here is how to setup CI/CD for an fresh Angular project on GitHub.</summary></entry><entry><title type="html">Bash Scripting Essentials</title><link href="https://codingindex.xyz/2020/03/07/bash-scripting-essentials/" rel="alternate" type="text/html" title="Bash Scripting Essentials" /><published>2020-03-07T15:00:00+00:00</published><updated>2020-03-07T15:00:00+00:00</updated><id>https://codingindex.xyz/2020/03/07/bash-scripting-essentials</id><content type="html" xml:base="https://codingindex.xyz/2020/03/07/bash-scripting-essentials/">&lt;p&gt;By no means am I a professional at bash scripting. That being said, I’ve done some pretty cool projects with just pure bash scripting, like &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;ContainerTop&lt;/a&gt;, a container-based desktop environment launcher, and &lt;a href=&quot;https://github.com/jameshi16/ungoogled-chromium-builder&quot;&gt;ungoogled-chromium-builder&lt;/a&gt; to let my private server build ungoogled chromium for my laptops.&lt;/p&gt;

&lt;p&gt;At work, I also write a bunch of utility aliases and functions to aid my work - these are my “commonly utilized” techniques and commands condensed into a blog post. This article is written as a “cheatsheet”, hopefully to serve as a quick reference for myself; though, if you find it useful, you can bookmark this page!&lt;/p&gt;

&lt;p&gt;NOTE: When writing bash scripts, make sure to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod +x ./relative/path/to/script&lt;/code&gt; at least once to flag the script as an executable.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#shebang&quot;&gt;Shebang&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#redirects&quot;&gt;Redirects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#subshells&quot;&gt;Subshells&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exit-on-error&quot;&gt;Exit on error&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#return-code&quot;&gt;Return code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ending-a-block&quot;&gt;Ending a block&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arrays&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finding-files&quot;&gt;Finding files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#replacing-strings&quot;&gt;Replacing strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finding-strings&quot;&gt;Finding strings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#xargs&quot;&gt;xargs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#removing-columns&quot;&gt;Removing columns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#newlines-are-not-preserved&quot;&gt;Newlines are not preserved&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;shebang&quot;&gt;Shebang&lt;/h1&gt;

&lt;p&gt;Any executable file containing the “shebang” in its first line:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will cause the script to be executed by the specified executable, which also means the script needs to be in a language understood by those executables. Some common shebangs I’ve write are: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/ruby&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/python3&lt;/code&gt;, which uses the Ruby and Python interpretor for the script respectively. Most people publishing scripts for usage online use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/env ruby&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/env python3&lt;/code&gt; instead, allowing users with non-standard or different interpretor locations to use the scripts.&lt;/p&gt;

&lt;h1 id=&quot;redirects&quot;&gt;Redirects&lt;/h1&gt;

&lt;p&gt;Redirects use the operators &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;. By default, inputs come from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDIN&lt;/code&gt; and outputs go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;, which are typically your terminal input and output respectively. This behaviour can be changed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Will write the word “hello” out to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, which is a normal file.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &amp;lt; file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Will read the word “hello” from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, which is the same file the “echo” has written “hello” to.&lt;/p&gt;

&lt;h2 id=&quot;common-use-case-log-files&quot;&gt;Common use case: Log files&lt;/h2&gt;

&lt;p&gt;Redirects can let you log the outputs of commands:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /var/log/syslog 2&amp;gt;&amp;amp;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Whatever expression in front of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; will produce outputs that go into the log file. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; instructs bash to redirect &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDERR&lt;/code&gt;(2) to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STDOUT&lt;/code&gt;(1). This is quite helpful for commands that don’t typically output to log files.&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;The ampersand symbol at the back of a command will cause it to run in the background:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;999 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When a background command is executed within an interactive shell, you can switch back to it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fg&lt;/code&gt; and switch away from it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL+Z&lt;/code&gt;. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt; to view the processes currently running in the terminal session. For a terminal session with no background processes, you should see two items: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt; itself, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ps&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;subshells&quot;&gt;Subshells&lt;/h1&gt;

&lt;p&gt;Subshells are created with the following syntax:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The results are assignable to a variable, but without protection, it can run arbitrary commands. Try this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo oh no&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh no&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo oh no&lt;/code&gt;. Such arbitrary commands can be avoided by enclosing the subshell with quotes (“). This works because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; is an escape cue for bash when interpreting strings.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo oh no'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;variables&quot;&gt;Variables&lt;/h1&gt;

&lt;p&gt;Variables can be defined like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can be used with “$VARIABLE”:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Both variants should print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To inhibit printing, use single quotes (‘):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$VARIABLE'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The line should print &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$VARIABLE&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;exit-on-error&quot;&gt;Exit on error&lt;/h1&gt;

&lt;p&gt;There are two ways to achieve this: (i) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set -e&lt;/code&gt; and (ii) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|| exit 1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; thisfiledoesnotexist &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is highly recommended to use the latter, as the behaviour is more well-structured and well-defined. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set -e&lt;/code&gt; causes the shell to exit on error if &lt;em&gt;any&lt;/em&gt; subcommands return with an error (defined as non-zero return status), while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|| exit&lt;/code&gt; only exits on that particular line.&lt;/p&gt;

&lt;h1 id=&quot;return-code&quot;&gt;Return Code&lt;/h1&gt;

&lt;p&gt;To know the last return code of a command, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$?&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this should succeed&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; is success.&lt;/p&gt;

&lt;h1 id=&quot;ending-a-block&quot;&gt;Ending a block&lt;/h1&gt;

&lt;p&gt;Different control statements have different ending statements. Below show some examples.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/syslog&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;congratulations, you have a system log&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
	&lt;/span&gt;7&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lucky seven&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	10|16&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my favourite number&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	42&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;universe number&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nothing special&quot;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;NUMBERS &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1 2 3 4 5 
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUMBERS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;arrays&quot;&gt;Arrays&lt;/h1&gt;

&lt;p&gt;Arrays can be defined like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;1 2 3 4 5 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1 2 3 4 5 6&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[0]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Turning a string of space-delimited strings into an array can be done with the following command (thanks to &lt;a href=&quot;https://stackoverflow.com/questions/10586153/split-string-into-an-array-in-bash/13196466&quot;&gt;this link&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; ARRAY &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1 2 3 4 5&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# prints 1 2 3 4 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use arrays in for loops like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;NUMBERS &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NUMBERS&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;finding-files&quot;&gt;Finding files&lt;/h1&gt;

&lt;p&gt;Files can be recursively found using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.js&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; to a directory of your choice. The pattern defined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-name&lt;/code&gt; supports the metacharacters: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, but only works for &lt;em&gt;filenames&lt;/em&gt;, so a pattern of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a/b&lt;/code&gt; cannot be used. Instead, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-prune&lt;/code&gt; option to remove directories that should not be included in the search. (Thanks to &lt;a href=&quot;https://stackoverflow.com/questions/4210042/how-to-exclude-a-directory-in-find-command&quot;&gt;this&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-prune&lt;/code&gt; command to remove directories you are not interested in, like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Documents&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-prune&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.zip&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-print&lt;/span&gt;
find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d &lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt; .path dir1 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt; dir2 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; path dir3 &lt;span class=&quot;se&quot;&gt;\)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-prune&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-print&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;replacing-strings&quot;&gt;Replacing strings&lt;/h1&gt;

&lt;p&gt;Strings can be replaced with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; command (among other utilities):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;i think apples are great&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/apples/oranges/g'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It might sometimes be necessary to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-E&lt;/code&gt; flag for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; when a more complicated regex is used. I typically use &lt;a href=&quot;https://regexr.com/&quot;&gt;regexr&lt;/a&gt; to build my Regex. The ‘s/’ is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; command that means “substitute”, with the ‘/g’ at the back representing “replace everything”. The one page GNU &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; manual can be found &lt;a href=&quot;https://www.gnu.org/software/sed/manual/sed.html&quot;&gt;here&lt;/a&gt;, or obtained via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man sed&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The escape character for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; (backslash).&lt;/p&gt;

&lt;h2 id=&quot;files&quot;&gt;Files&lt;/h2&gt;

&lt;p&gt;To replace a string in a file, simply provide an input file instead of piping the input:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;aFile
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; aFile
i
like
oranges
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/oranges/pears/g'&lt;/span&gt; aFile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; flag means “edit file in-place”.&lt;/p&gt;

&lt;h1 id=&quot;finding-strings&quot;&gt;Finding strings&lt;/h1&gt;

&lt;p&gt;Strings can be recursively found in directories using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; (among other utilities):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;important string&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# searches all files recursively for important string&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[aeiou]+&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# searches all files for strings with one or more vowels&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[aeiou]+&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.js &lt;span class=&quot;c&quot;&gt;# searches all .js files for strings wiht one or more vowels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;xargs&quot;&gt;xargs&lt;/h1&gt;

&lt;p&gt;To pass the left-hand-side of a pipe as an argument to the right-hand-side for commands that don’t support reading from pipes, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xargs&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;newBranch&quot;&lt;/span&gt; | xargs git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;removing-columns&quot;&gt;Removing columns&lt;/h1&gt;

&lt;p&gt;If you have text like this (you can get something like this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git branch
* master
  develop
  bug-fixes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can make the output processable by removing the first two columns (which contain the asterisk) with:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch | colrm 1 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;master
develop
bug-fixes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;newlines-are-not-preserved&quot;&gt;Newlines are not preserved&lt;/h1&gt;

&lt;p&gt;Say you have a string with newlines, like this: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hello\nworld&quot;&lt;/code&gt;. If you assign it to a variable after processing like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;world&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Your output would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hello world&quot;&lt;/code&gt;. Be aware of this issue when writing scripts; this can probably be mitigated by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tr&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello
world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;That should be all for now. I may occasionally pop by to update this page, but the permalink should still stay the same. Keep a bookmark :bookmark: if you found it useful!&lt;/p&gt;

&lt;p&gt;Happy coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="utility" /><category term="linux" /><category term="linux" /><summary type="html">By no means am I a professional at bash scripting. That being said, I’ve done some pretty cool projects with just pure bash scripting, like ContainerTop, a container-based desktop environment launcher, and ungoogled-chromium-builder to let my private server build ungoogled chromium for my laptops.</summary></entry><entry><title type="html">Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part III)</title><link href="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-3/" rel="alternate" type="text/html" title="Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part III)" /><published>2019-09-05T19:30:00+00:00</published><updated>2019-09-05T19:30:00+00:00</updated><id>https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-3</id><content type="html" xml:base="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-3/">&lt;p&gt;In theory, this tutorial is out of scope if we’re talking about the title; however, this tutorial is crucial, because it completes the entire IoT stack. In this tutorial, you will be building on whatever you have done in &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;Part I&lt;/a&gt; and &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;Part II&lt;/a&gt;, to build application logic that makes decisions and commands the IoT actuators based on information obtained via sensors.&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;

&lt;p&gt;The previous tutorials, &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;Part I&lt;/a&gt; and &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;Part II&lt;/a&gt;, must be done.&lt;/p&gt;

&lt;h1 id=&quot;step-one&quot;&gt;Step One&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the AWS Mangement Console.&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IAM&lt;/strong&gt; (found under the section “Security, Identity &amp;amp; Compliance).
 &lt;img src=&quot;/images/20190905_15.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWS IAM&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IAM | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Roles&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_16.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Roles&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Roles | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Create role&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_17.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Lambda&lt;/strong&gt; under the &lt;strong&gt;Choose the service that will use this role&lt;/strong&gt;. Then, click on &lt;strong&gt;Next: Permissions&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190906_1.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Choosing the service to use the role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Choosing the service to use the role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Search and select the policies: “AWSLambdaBasicExecutionRole”, “AmazonDynamoDBFullAccess”, and “AWSIoTDataAccess” from the policy search bar. Then, click &lt;strong&gt;Next: Tags&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190906_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWSLambdaBasicExecutionRole&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;AWSLambdaBasicexecutionRole | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190906_3.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AmazonDynamoDBFullAccess&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;AmazonDynamoDBFullAccess | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190906_4.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWSIoTDataAccess&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;AWSIoTDataAccess | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Next: Review&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_20.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Next: Review&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Next: Review | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the role whatever you wish (Field: &lt;em&gt;Role name&lt;/em&gt;). For the purposes of this tutorial, it will be named “lambda-role”. Then, click on &lt;strong&gt;Create role&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190906_5.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create the role with a name&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create the role with a name | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;Lambda&lt;/strong&gt; (found under the section “Compute”)
 &lt;img src=&quot;/images/20190906_6.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Lambda&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on Lambda | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Create a function&lt;/strong&gt; if you are a new user, or &lt;strong&gt;Create function&lt;/strong&gt; if you already have some lambda functions on your account.
&lt;img src=&quot;/images/20190906_7.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a function (new users)&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Creating a function for new users | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/20190906_8.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a function (existing users)&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Creating a function for existing users | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the function whatever you wish (Field: &lt;em&gt;Function name&lt;/em&gt;). For the purposes of this tutorial, it will be named “iot-lambda”. Then, select the role created earlier in step 9, under the &lt;strong&gt;Existing role&lt;/strong&gt; dropbox. You may have to click a dropdown link (&lt;strong&gt;Choose or create an execution role&lt;/strong&gt;) to reach this setting. Finally, click on &lt;strong&gt;Create function&lt;/strong&gt;.
&lt;img src=&quot;/images/20190906_9.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Fill in the fields, and create the function&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Fill in the fields, and create the function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Fill the code editor with code from &lt;a href=&quot;https://gist.github.com/jameshi16/851dc9de904811c1b2304cfc1f819f1d&quot;&gt;this gist&lt;/a&gt;.
&lt;img src=&quot;/images/20190906_10.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Fill in the code for the lambda function&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Fill in the code for the lambda function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Set the environment variables, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TABLE_NAME&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOT_ENDPOINT&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOT_PUBLISH_TOPIC&lt;/code&gt; based on the DynamoDB table name, your IoT endpoint, and the topic subscribed by the ESP32.
&lt;img src=&quot;/images/20190906_11.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Environment Variables&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Set environment variables | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Save&lt;/strong&gt;, at the top right of the screen.
&lt;img src=&quot;/images/20190906_12.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on Save&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Save the lambda function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IoT Core&lt;/strong&gt; (found under the section “Internet of Things”)
&lt;img src=&quot;/images/20190622_1.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Services button on AWS Console&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IoT Core | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/20190622_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Core&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;IoT Core | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Act&lt;/strong&gt;
&lt;img src=&quot;/images/20190905_7.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Act button on IoT Core&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Act | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the IoT rule you have created in Part II. If you have not done part II, please do &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;it now&lt;/a&gt;.
&lt;img src=&quot;/images/20190906_13.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on the IoT rule created previously&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IoT rule created previously&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Add Action&lt;/strong&gt;, under the &lt;strong&gt;Actions&lt;/strong&gt; section.
&lt;img src=&quot;/images/20190906_14.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Add another action&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Add another action | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Send a message to a Lambda function&lt;/strong&gt;, and click on &lt;strong&gt;Configure Action&lt;/strong&gt; at the bottom of the page.
&lt;img src=&quot;/images/20190906_15.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Add a lambda action&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Adding a lambda action | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Under the &lt;em&gt;Function name&lt;/em&gt; field, click on &lt;strong&gt;Select&lt;/strong&gt;, then find the function created earlier in step 11, and click &lt;strong&gt;Select&lt;/strong&gt; on the corresponding entry. Finally, click on &lt;strong&gt;Add Action&lt;/strong&gt;.
&lt;img src=&quot;/images/20190906_16.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Select the correct lambda&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Select the correct lambda function | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;step-two&quot;&gt;Step Two&lt;/h1&gt;

&lt;p&gt;Similar to how it was done in &lt;a href=&quot;/2019/09/05/mqtt-aws-iot-dynamodb-part-2/&quot;&gt;Part II&lt;/a&gt;, go to the DynamoDB table and refresh the contents. Count the number of records currently on the table, and press the ‘BOOT’ button on the ESP32 until that count reaches a multiple of 10. The led of the ESP32 should light up only when there is a multiple of 10, otherwise, it will be turned off.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://gist.github.com/jameshi16/851dc9de904811c1b2304cfc1f819f1d&quot;&gt;lambda script&lt;/a&gt; you pasted earlier is in charge of causing this to happen; firstly, it will obtain device data. Then, it will make a decision based on the device data; in this case, “is the number of records a multiple of 10? If so, turn on the led, else, turn it off”.&lt;/p&gt;

&lt;p&gt;Try connecting multiple ESP32s to the same topics, and see what happens when one of the devices are used to make the number of records reach a multiple of 10!&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Congratulations! You have made a full IoT application, starting from Part I: Controlling stuff, to Part II: Collecting data and finally, to Part III: Making decisions. Experiment with this a little bit more, and build the next big thing; you now have the basic skills required to do that on AWS!&lt;/p&gt;

&lt;p&gt;If you found this trilogy useful, please do share it with your friends.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="aws" /><category term="aws" /><category term="iot" /><category term="mqtt" /><summary type="html">In theory, this tutorial is out of scope if we’re talking about the title; however, this tutorial is crucial, because it completes the entire IoT stack. In this tutorial, you will be building on whatever you have done in Part I and Part II, to build application logic that makes decisions and commands the IoT actuators based on information obtained via sensors.</summary></entry><entry><title type="html">Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part II)</title><link href="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-2/" rel="alternate" type="text/html" title="Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part II)" /><published>2019-09-05T12:30:00+00:00</published><updated>2019-09-05T12:30:00+00:00</updated><id>https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-2</id><content type="html" xml:base="https://codingindex.xyz/2019/09/05/mqtt-aws-iot-dynamodb-part-2/">&lt;p&gt;Finally, the long-awaited (2 months) part II is here!&lt;/p&gt;

&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h2&gt;

&lt;p&gt;You must have completed &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;Part I&lt;/a&gt; to continue with this tutorial, as this tutorial builds on the previous tutorial.&lt;/p&gt;

&lt;h2 id=&quot;linking-up-aws-iot-to-dynamodb&quot;&gt;Linking up AWS IoT to DynamoDB&lt;/h2&gt;

&lt;p&gt;In the previous part, the ESP32 was linked to DynamoDB via MQTT, and it was possible to control the LED of the ESP32 by publishing a message via the AWS IoT testing console to the subscribed IoT topic. However, IoT is much more than just controlling devices from the cloud. There are some devices, known as “IoT Sensors”, which are able to report sensor data to the internet. Combined with the ability to control devices and with the massive power of Cloud Computing, this allows more powerful machines to make decisions based on the data collected from the sensors, then returning those results as commands to control devices based on inferences made from aforementioned data.&lt;/p&gt;

&lt;p&gt;We can then integrate advanced computing techniques like Big Data and Machine Learning with IoT to better improve lives based around IoT products in a household. This vaguely composites into what is known as “Smart Home”; using a cluster of IoT sensors and actuators to: (i) cut utility bills, (ii) make living more convenient, and (iii) make living more entertaining (&lt;a href=&quot;https://www.androidauthority.com/what-is-a-smart-home-806483/&quot;&gt;AndroidAuthority&lt;/a&gt;, 2019). Scale that to the size of a city, and the term becomes “Smart City”, making payments, transport, security, et. cetera more convenient.&lt;/p&gt;

&lt;p&gt;Therefore, in this section, you will be modifying your handiwork in Part I to make it such that the ESP32 would publish a JSON object indicating that a button on the ESP32 has been pressed. This JSON object will then be mapped as columns on a DynamoDB table.&lt;/p&gt;

&lt;p&gt;Looking at the ESP32 schematics:
&lt;img src=&quot;/images/20190905_1.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Schematics for the 'BOOT' button&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;The schematics for the 'BOOT' button | &lt;a href=&quot;https://dl.espressif.com/dl/schematics/ESP32-Core-Board-V2_sch.pdf&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It appears that the ‘BOOT’ active-low button can be used as a typical button, which is perfect for the current use case.&lt;/p&gt;

&lt;h3 id=&quot;step-ichi&quot;&gt;Step Ichi&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;DynamoDB&lt;/strong&gt; (found under the section “Database”)
 &lt;img src=&quot;/images/20190905_2.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;DynamoDB is under the Database Section&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;DynamoDB | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If you’ve created a DynamoDB table before, you may see a different resultant screen. Click on &lt;strong&gt;Create table&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_3.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;New user DynamoDB&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click this if you don't already have a table | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;img src=&quot;/images/20190905_4.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Existing user DynamoDB&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click this instead if you already have tables | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Fill in &lt;em&gt;Table name&lt;/em&gt; with whatever name you wish. For the purposes of this tutorial, it will be called “iot-table”. Call the partition key “uid”, as we will be generating a random UID per record. Then, click &lt;strong&gt;Create&lt;/strong&gt;. (NOTE: If your account is limited and you are not allowed to create auto-scaling tables, please uncheck &lt;em&gt;Use default settings&lt;/em&gt; and clear all options related to &lt;em&gt;Auto scaling&lt;/em&gt;)
 &lt;img src=&quot;/images/20190905_5.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Table Creation Wizard&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Table Creation Wizard | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IAM&lt;/strong&gt; (found under the section “Security, Identity &amp;amp; Compliance)
 &lt;img src=&quot;/images/20190905_15.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;AWS IAM&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IAM | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Roles&lt;/strong&gt;
 &lt;img src=&quot;/images/20190905_16.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Roles&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Roles | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Create role&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_17.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;IoT&lt;/strong&gt; under the &lt;strong&gt;Choose the service that will use this role&lt;/strong&gt;. Then, click on &lt;strong&gt;IoT&lt;/strong&gt; under the &lt;strong&gt;Select your use case&lt;/strong&gt;. Finally, click on &lt;strong&gt;Next: Permissions&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_18.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Choosing the service to use the role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Choosing the service to use the role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Next: Tags&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_19.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Next: Tags&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Next: Tags | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Next: Review&lt;/strong&gt;
&lt;img src=&quot;/images/20190905_20.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Next: Review&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Next: Review | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the role whatever you wish (Field: &lt;em&gt;Role name&lt;/em&gt;). For the purposes of this tutorial, it will be named “iot-role”. Then, click on &lt;strong&gt;Create role&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_21.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create the role with a name&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create the role with a name | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the role you have just created.
&lt;img src=&quot;/images/20190905_22.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on the role you have just created&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click the role you have just created | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Attach policies&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_23.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on Attach policies&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Attach Policies | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the search bar, type “DynamoDB”, and select the &lt;strong&gt;AmazonDynamoDBFullAccess&lt;/strong&gt; policy. Then, click &lt;strong&gt;Attach policy&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_24.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Search and select the policy&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Search and select &lt;b&gt;AmazonDynamoDBFullAccess&lt;/b&gt; | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IoT Core&lt;/strong&gt; (found under the section “Internet of Things”)
&lt;img src=&quot;/images/20190622_1.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Services button on AWS Console&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on IoT Core | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/20190622_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Core&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;IoT Core | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Act&lt;/strong&gt;
&lt;img src=&quot;/images/20190905_7.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Act button on IoT Core&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Act | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If you have not created a AWS IoT Rule before, click on “Create a rule”. Otherwise click “Create”.
&lt;img src=&quot;/images/20190905_8.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a rule (new user)&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a rule (new user) | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;img src=&quot;/images/20190905_9.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a rule (existing user)&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a rule (existing user) | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name the rule (the &lt;em&gt;Name&lt;/em&gt; field). For the purposes of this tutorial, it will be named “dynamodb_rule”.
&lt;img src=&quot;/images/20190905_10.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Rule Name&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Name the rule whatever you want | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;In the &lt;em&gt;Rule query statement&lt;/em&gt;, use this SQL statement:
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newuuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'another/topic/hello'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/images/20190905_11.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;SQL Query&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Put the SQL statement into the &lt;i&gt;Rule query statement&lt;/i&gt; field | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Add action&lt;/strong&gt; under the &lt;strong&gt;Set one or more actions&lt;/strong&gt; section.
&lt;img src=&quot;/images/20190905_12.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;SQL Actions&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on the Add Action button | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Check the &lt;strong&gt;Split message into multiple columns of a DynamoDB table (DynamoDBv2)&lt;/strong&gt; option, and scroll down to click &lt;strong&gt;Configure action&lt;/strong&gt; button.
&lt;img src=&quot;/images/20190905_13.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Option + Configure action button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Configure the action | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Select the corresponding &lt;em&gt;Table name&lt;/em&gt; created in step 4. Select the corresponding role created in step 11, by first clicking on &lt;strong&gt;Select&lt;/strong&gt;, then selecting the role with the subsequent &lt;strong&gt;Select&lt;/strong&gt; button. Finally, click &lt;strong&gt;Add action&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_14.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Select the correct table name and IAM role&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Table name, and IAM role | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Back on the rule creation wizard, click on &lt;strong&gt;Create rule&lt;/strong&gt;.
&lt;img src=&quot;/images/20190905_25.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create the rule&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create the rule | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-ni&quot;&gt;Step Ni&lt;/h3&gt;

&lt;p&gt;Now that the AWS services are setup properly, it is time to update the Arduino code. Replace (or selectively replace, if you know what you’re doing) the old code with new code from &lt;a href=&quot;https://gist.github.com/jameshi16/5846acdec40279028319c680fe8314b5&quot;&gt;this gist&lt;/a&gt;. Here is the summary of the changes made since the previous Arduino program:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Recieving a message from the subscription topic no longer echos to the publishing topic;&lt;/li&gt;
  &lt;li&gt;Button is programmed to send a message (a JSON object containing the state of the LED) to the publishing topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensure that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssid&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_hostname&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_sub_topic&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_pub_topic&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ca_certificate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_certificate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_privatekey&lt;/code&gt; are filled in correctly, as described in the &lt;a href=&quot;/2019/06/22/mqtt-aws-iot-dynamodb-part-1/&quot;&gt;previous tutorial&lt;/a&gt;’s Step Dos.&lt;/p&gt;

&lt;p&gt;Plug in the ESP32, select the port, and upload. Open the serial console to see debugging information, if desired.&lt;/p&gt;

&lt;h3 id=&quot;step-san&quot;&gt;Step San&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go back to the AWS Console, and revisit &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;DynamoDB&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190905_2.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;DynamoDB is under the Database Section&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;DynamoDB | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Tables&lt;/strong&gt;
 &lt;img src=&quot;/images/20190905_26.jpg&quot; style=&quot;max-width: 200px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on tables&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;DynamoDB sidebar | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the table you created, and then click on the &lt;strong&gt;Items&lt;/strong&gt; tab.
 &lt;img src=&quot;/images/20190905_27.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;View items in the table&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;View items in the table | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the physical ESP32 device, press and release the ‘BOOT’ button once.
 &lt;img src=&quot;/images/20190905_28.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;The boot button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Press this button once | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on the refresh icon, located on the top right of the DynamoDB items table. You should see a new entry. Try pressing the ‘BOOT’ button on the ESP32 device a couple more times to see new records coming in.
 &lt;img src=&quot;/images/20190905_29.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;The refresh button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;The refresh button | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Ensure that previous functionality of turning on / off the LED through the subscription topic still works.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-did-i-just-do&quot;&gt;What did I just do?&lt;/h1&gt;

&lt;p&gt;Now, you have a means to control a device, &lt;strong&gt;and&lt;/strong&gt; a means to get device information from the ESP32. If all you need is to store the state of IoT things, including the state history, AWS IoT provides a feature to do just that - it is known as “Shadow Document”, which allows an IoT device to be stateless while reporting information to AWS IoT, which can keep track of state. You can learn more about that &lt;a href=&quot;https://docs.aws.amazon.com/iot/latest/developerguide/device-shadow-document.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, for our application, we want to process data as it comes in; computing something from the device information so that we can control the said device. Hence, we don’t have a need for the Shadow Document; instead, we opted to use a database like DynamoDB. You can learn more about DynamoDB &lt;a href=&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hence, we still have a missing step; the part where we process the data. (Part III? &lt;em&gt;wink wink&lt;/em&gt;)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;IoT is an important topic, and should be accessible to everyone. Studying IoT not only includes learning how to actually implement it, but includes other important aspects, such as security (our solution is not very secure, to make it easier to achieve certain steps), connectivity, and scaling.&lt;/p&gt;

&lt;p&gt;Do look out for Part III!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="aws" /><category term="aws" /><category term="iot" /><category term="mqtt" /><summary type="html">Finally, the long-awaited (2 months) part II is here!</summary></entry><entry><title type="html">Desktop in LXD Containters</title><link href="https://codingindex.xyz/2019/09/04/desktop-in-lxd-containers/" rel="alternate" type="text/html" title="Desktop in LXD Containters" /><published>2019-09-04T15:00:00+00:00</published><updated>2019-09-04T15:00:00+00:00</updated><id>https://codingindex.xyz/2019/09/04/desktop-in-lxd-containers</id><content type="html" xml:base="https://codingindex.xyz/2019/09/04/desktop-in-lxd-containers/">&lt;p&gt;Sometimes, when dabbling with technology, you want to know the limits, and how far you can push it before it becomes “too far”.&lt;/p&gt;

&lt;p&gt;If you’ve ever read the &lt;a href=&quot;/about/&quot;&gt;About me&lt;/a&gt; page, you would know that I am a privacy advocate. It means that I go the extra mile to ensure that no one else but myself knows everything about, well, myself. This is why containers are so intriguing to me; they essentially confine applications within a jail that is difficult to escape from, but yet still share the same kernelspace as my host system, giving it much less computing overhead compared to their Virtual Machine counterparts.&lt;/p&gt;

&lt;p&gt;This is very useful for developers; which is why applications like &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; exists. These containers ensure that they function exactly the same across all the platforms that can run Docker, eliminating the popular “but it works on my machine!” problem. Other than Docker, which containerizes applications, there are other more general-use container applications, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linux Containers (LXC)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LXD&lt;/code&gt;. One clear difference between Docker and LXC, would be the fact that by default, Docker spawns non-persistent containers, while LXC spawns persistent containers, making Docker useful to host applications that interact with an external database, but do not store state themselves (i.e. almost all applications I can think of). LXC, on the other hand, would be useful to create something like a development environment; containing tools such as compilers, interpreters, IDEs, text editors, and sometimes even Docker (container in container-ception!).&lt;/p&gt;

&lt;h3 id=&quot;how-i-have-been-using-lxd-containers&quot;&gt;How I have been using LXD Containers&lt;/h3&gt;

&lt;p&gt;For some people, it is an anti-thesis to computing to have all your tools so segregated. People like all their tools to be in one place, accessible anytime they command. However, I am an organizing freak when it comes to computers.&lt;/p&gt;

&lt;p&gt;All projects shall have their own containers - that is my philosphy. The host computer is nothing but a container orchestrator, with the sole purpose of managing the display, USB connections, networking with the outside world, et. cetera. This means that the bulk of my work is done in LXD containers; I even go the extra mile to use an external hard disk to store these containers, so that I can fully isolate even the storage hardware used for the containers.&lt;/p&gt;

&lt;p&gt;At the beginning of last year, I followed a &lt;a href=&quot;https://blog.simos.info/how-to-run-graphics-accelerated-gui-apps-in-lxd-containers-on-your-ubuntu-desktop/&quot;&gt;guide by Simos&lt;/a&gt; on how to allow LXD containers to run X11 applications on the host XOrg server. For a while, that was how I developed graphical applications using graphical IDEs; sometimes, GUIs cannot be avoided. Despite my longing to use the terminal for everything, reality is not all fun and games, meaning some work must be done via GUI.&lt;/p&gt;

&lt;p&gt;Simos’ guide had some gaping holes in security, however. In his guide, a user mapping is performed on the container to the host; meaning that the unprivileged user’s User ID (UID) in the container matched with the one on the host. In simpler terms, that means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu@host&lt;/code&gt; has the same user ID has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu@container&lt;/code&gt;. Should a process be able to escape the isolation provided by the container, the user in the container would have the &lt;strong&gt;same&lt;/strong&gt; permission as a normal user in the host, allowing the container’s malicious processes to affect files in the host filesystem, particularly the home directory.&lt;/p&gt;

&lt;p&gt;Let’s not talk about privileged containers; they’re just like user mapping, except that &lt;strong&gt;all&lt;/strong&gt; the users are mapped, including root (UID 0). &lt;a href=&quot;https://brauner.github.io/2019/02/12/privileged-containers.html&quot;&gt;Brauner’s blog&lt;/a&gt; explain what privileged containers are, and why they are dangerous, even including a link to a &lt;a href=&quot;https://seclists.org/oss-sec/2019/q1/119&quot;&gt;vulnerability report, CVE-2019-5736&lt;/a&gt;. In essence, the only security one would have left are the confines of a chroot jail and apparmor (alongside other techniques, read more about them in Brauner’s blog).&lt;/p&gt;

&lt;p&gt;The other gaping hole exists in the fact that both the container and the host would share the same XOrg server, meaning that if the container had a keylogger, or a clipboard monitor, and the container is connected to the host via X11, any keystroke performed within the XOrg server (i.e. any application within the host &lt;em&gt;and&lt;/em&gt; client) can be stored and used for malicious purposes.&lt;/p&gt;

&lt;p&gt;Of course, this would not be an issue if you were to trust the applications within the privileged containers; if you aren’t testing untrusted programs or just generally don’t trust anything at all, forwarding your X11 server using Simos’ method is a viable option to organize your applications and development environments. For a while, I was contend with that; as long as it stayed within the container, I could, at any moment, export and subsequently delete the container. Other than the standard container advantages, this also allowed me to separate configurations for the same application between the containers; for example, I can have a newer version of CUDA tookit installed on my host, but a different version of CUDA tookit installed in the container, without the container’s tookit conflicting with my host toolkit; I could also compile a newer version of Clang just for a container without the older compiler available on my host, and the list goes on.&lt;/p&gt;

&lt;p&gt;However, as my requirements increased together with my workload, I found this solution to be insufficient. I found myself often times requiring to forward ports from my container just so that I can access certain features within the container; then I found myself requiring to reset cookies often so that my webapp that integrates with many services can have a fresh state to work on; while other times, I wouldn’t want to reset it (incognito would not cut it, as I would need to recreate those cookies every browser restart); then I found myself just generally wishing I had file browsers, dedicated terminals for my containers etc. As my requirements grew, so did the number of tabs on my terminal emulator, until one day, I decided it was the end of the XOrg sharing era.&lt;/p&gt;

&lt;h3 id=&quot;containertop&quot;&gt;ContainerTop&lt;/h3&gt;

&lt;p&gt;After my examinations, I took a few days to develop &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;ContainerTop&lt;/a&gt; - a creatively named project to create containers that hosts their own desktop environments, on their own XOrg servers, complete with hardware graphics acceleration (meaning you can play 3D games on it), sound forwarding, and native processing speed minus the typical container overhead (not much).&lt;/p&gt;

&lt;p&gt;“What about Virtual Machines? Like virt, VirtualBox and VMWare?” - To get &lt;strong&gt;hardware&lt;/strong&gt; graphics accleration, you need to do PCI passthrough. To perform PCI passthrough on a single GPU device, you need to edit the graphics controller’s ROM, which is a risk not many people want to take. Plus, virtual machine overhead includes emulating the kernel, which is a big, big overhead.&lt;/p&gt;

&lt;p&gt;“Okay, why not go with Xpra/Xrdp/X2GO/SSH X11 Forwarding?” - Same problems as I mentioned in the above section.&lt;/p&gt;

&lt;p&gt;“But, Xpra/X2Go can host desktop environments too!” - The overhead is quite substantial in this setup; first, there is the connection. Between the SSH, TCP and NX protocols, the NX protocol is arguably the fastest protocol available out there. Even with NX protocol’s superiority, the overhead and hence latency is noticeable. Secondly, there is also image compression. To get acceptable image quality (16k-png) on a local connection (remember, the container is on localhost), the amount of stutter while watching videos is surprisingly unbearable. As much as possible, I would not like to switch between the container and the host while working on a project, because everything I need should be already inside the project container, in one workspace. Hence, being able to watch videos (useful for learnings things on the spot) is an absolute requirement, which leaves Xpra and X2Go unusable. Of course, if all that is needed is a desktop environment for the sole purpose of development and nothing else, Xpra and X2Go provides fantastic speeds and quality (I tested it during these few days of implementing ContainerTop), with Xpra even supporting VirtualGL, so you can install desktop environments on a beefy server, and then use a Thin Client to access it, while maintaining the capabilities required for 3D accelerated programs like FreeCAD with a reasonable latency.&lt;/p&gt;

&lt;p&gt;“AWS, Google Cloud, Alibaba Cloud…” - Any cloud service would have too much latency for my tastes. Also, same problem as the above paragraph.&lt;/p&gt;

&lt;p&gt;To use ContainerTop, all applications that uses XOrg must be killed, so that the video card is free from any usage. Then, the container’s XOrg server is booted, which will take control of the video card and start displaying content. This is all done on an unprivileged and unmapped container; and only the required devices are passed through; things like the video card, mouse and keyboard. Brightness and sound are passed through via a different method, without giving the container direct access to those functionalities.&lt;/p&gt;

&lt;p&gt;You can find out more, and even try ContainerTop for yourselves &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;here&lt;/a&gt;. Please note that you will need an afternoon to set things up properly, so do it only when you are free!&lt;/p&gt;

&lt;p&gt;With ContainerTop, I can (finally) have an isolated workspace for any projects I’m working on, with the added bonus of LXD’s container management capabilities, including taking snapshots of the container for rollback, export and publishing purposes, and deleting the containers anytime I no longer need them. It’s the most perfect solution for me.&lt;/p&gt;

&lt;h3 id=&quot;problems-encountered-while-developing-containertops-first-version&quot;&gt;Problems encountered while developing ContainerTop’s first version&lt;/h3&gt;

&lt;p&gt;Long section title, I know.&lt;/p&gt;

&lt;p&gt;You didn’t expect me to write a blog post claiming I had absolutely no problems developing ContainerTop did you? :smirk:&lt;/p&gt;

&lt;p&gt;It’s all about the learning experience.&lt;/p&gt;

&lt;p&gt;Anyway, developing the desktop switching part of ContainerTop on my particular setup created many, many problems. The desktop switching script (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;desktop_enter.sh&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;desktop_enter_vt.sh&lt;/code&gt;) is in charge of setting the correct permissions, killing the host’s login manager and starting the login manager on the container. Let me explain the problems, and how I solved them, and how that created even more problems.&lt;/p&gt;

&lt;p&gt;Firstly, my external harddrive is encrypted, and I made it a policy to manually decrypt it everytime I want to use it. As such, I first tried to make a userspace script (i.e. to be run logged into GNOME session on Ubuntu), with fancy script hooks to my encryption/decryption script, switching the user around terminals, et cetera. The problem was that the TTY spawned by the script to run the child process of the aforementioned script was not persistent; after a certain time period, the script will just magically cease to work.&lt;/p&gt;

&lt;p&gt;I tried to find the cause of the issue, and figured out that killing the login manager also probably tries to kill all the child processes spawned from it, and my script was one of those children. I took about two days to come to this conclusion after many, many hours experimenting.&lt;/p&gt;

&lt;p&gt;Giving up on the userspace script, I decided to write a script that required a virtual terminal to run. This is how the user would interact with this new script: Logout of GNOME session -&amp;gt; See login screen -&amp;gt; Press CTRL+ALT+F&amp;lt;num&amp;gt; to switch to a free terminal -&amp;gt; Run the desktop switching script. Once I got that working with the container I manually constructed to model subsequent containers after, I added the brightness script, which was written using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;evtest&lt;/code&gt; on the host so that the container cannot get malicious access to it programmatically (i.e. can cause epilepsy by flashing the screen fast enough). And then I tried to write a PulseAudio script.&lt;/p&gt;

&lt;p&gt;Turns out, PulseAudio was yet another brick wall. For those uninitiated, PulseAudio is how most Linux distro handles sound, and is run on a per-user basis. Typically, that is great, but in the context of Virtual Terminals (TTYs), this is bad news. If you have free time, you should try it; first, grab a random &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.wav&lt;/code&gt; file, and play it on any virtual terminal using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paplay soundfile.wav&lt;/code&gt; (maybe on tty3). Then, switch your terminal using CTRL+ALT+F&amp;lt;num&amp;gt;. Your music file should stop playing. That’s how PulseAudio handles sound; only the current active Virtual Terminal gets to play sound. Since ContainerTop’s desktop switching script uses a different TTY for display than the TTY used to run the script, this means that I cannot forward PulseAudio’s sound while it’s running in user mode.&lt;/p&gt;

&lt;p&gt;Back then, I didn’t know &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--system=TRUE&lt;/code&gt; was a thing; so it took me another two days of pure trial and error (with options not related to PulseAudio) to figure out that I needed to run PulseAudio in system mode, which the PulseAudio devs dub as a bad idea :tm:. If you can, try it for yourself; run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulseaudio --system=TRUE&lt;/code&gt;, do the same playing of the music file thing, and then switch terminals. You’ll notice that the sound continues to play. That is a good sign.&lt;/p&gt;

&lt;p&gt;Hence, using that new found knowledge, all I needed to do to forward PulseAudio to the container, is to enable PulseAudio’s native TCP module, and copy the pulse cookie into the container; this is all done in the PulseAudio script under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modules/&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;p&gt;I then wrote the container creation script, referring to the model container to see what was required. It may sound all good, but here’s the catch: I’ve fiddled with the model container, to try and find the most optimal configuration, meaning that there may be some additional packages, unrequired configurations, etc that lay residue inside the container. Hence, when the container created from the container creation script didn’t work, I was left very confused and frustrated, because I thought I copied almost all aspects of the model container.&lt;/p&gt;

&lt;p&gt;After another set of countless hours fiddling with the container configuration files, I finally arrived at a conclusion: the LightDM’s greeter was the main cause.&lt;/p&gt;

&lt;p&gt;“Huh?”&lt;/p&gt;

&lt;p&gt;LightDM can be customized with what is known as greeters; they change the background slightly, maybe move the login panel to the center, has more/less widgets, et cetera. When I first checked the logs for the greeter, there was a line that basically said:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
the greeter executable - screen is 0,0, drawing 0,0 login screen
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Note: not the actual log&lt;/p&gt;

&lt;p&gt;This of course looked off, but I didn’t attribute it to the greeter at first; because I mean, all greeters basically do the same thing, right?&lt;/p&gt;

&lt;p&gt;I only gave changing the greeter to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unity-greeter&lt;/code&gt; a try when I have exhausted all the other options, and to my surprise, it worked! Checking the logs, it seems like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unity-greeter&lt;/code&gt; was able to detect the screen resolution, leaving me, an ex-convict of the confusion prision, jumping for joy. Up to now, I still have no idea why the previous greeter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slick-greeter&lt;/code&gt;) didn’t work - I thought of manually configuring them, but at that point I just wanted the screen to display something from the container.&lt;/p&gt;

&lt;p&gt;There were also the problems of how the script can be easily terminated, and malicious attackers with physical access to the computer can simply do so to gain user account access, which I solved by killing the bash process of the TTY the script is in once it terminates, requiring any users to log in again to use the Virtual Terminal.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;There are still some quirks that I intend to iron out, and new features I want to implement to make my life inside the container much easier for myself. Working on ContainerTop has taught me quite a lot of things, including how maintainers think, and how to debug issues when you’re no longer within a desktop environment. Please check out the &lt;a href=&quot;https://github.com/jameshi16/ContainerTop&quot;&gt;ContainerTop&lt;/a&gt; project, and try it out on your free time!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;Coding Index&lt;/p&gt;</content><author><name>James</name></author><category term="lxd" /><category term="containers" /><category term="desktop" /><category term="linux" /><category term="lxd" /><category term="containers" /><category term="desktop" /><category term="linux" /><category term="ubuntu" /><category term="x11" /><category term="pulseaudio" /><summary type="html">Sometimes, when dabbling with technology, you want to know the limits, and how far you can push it before it becomes “too far”.</summary></entry><entry><title type="html">Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part I)</title><link href="https://codingindex.xyz/2019/06/22/mqtt-aws-iot-dynamodb-part-1/" rel="alternate" type="text/html" title="Tutorial: ESP32 to AWS IoT to AWS DynamoDB (Part I)" /><published>2019-06-22T12:00:00+00:00</published><updated>2019-06-22T12:00:00+00:00</updated><id>https://codingindex.xyz/2019/06/22/mqtt-aws-iot-dynamodb-part-1</id><content type="html" xml:base="https://codingindex.xyz/2019/06/22/mqtt-aws-iot-dynamodb-part-1/">&lt;p&gt;You read the title, let’s get started. For this tutorial, we will be using the &lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;Arduino IDE&lt;/a&gt;. This should be possible with &lt;a href=&quot;https://github.com/espressif/esp-idf&quot;&gt;ESP-IDF&lt;/a&gt;, too, because &lt;a href=&quot;https://github.com/espressif/esp-mqtt&quot;&gt;ESP-MQTT&lt;/a&gt; is included as part of the ESP-IDF.&lt;/p&gt;

&lt;h1 id=&quot;tested-on&quot;&gt;Tested on&lt;/h1&gt;
&lt;p&gt;This tutorial was created on Ubuntu 18.04.&lt;/p&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;Before the tutorial begins, please download the following pre-requisites (the version numbers are the versions used to create this tutorial):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino IDE&lt;/a&gt; - 1.8.9&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python&lt;/a&gt; - 3.6.8&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;setting-up-prerequisites&quot;&gt;Setting up prerequisites&lt;/h1&gt;
&lt;h2 id=&quot;arduino-ide&quot;&gt;Arduino IDE&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download the &lt;a href=&quot;https://www.arduino.cc/en/Main/Software&quot;&gt;Arduino IDE&lt;/a&gt; if you don’t already have it.&lt;/li&gt;
  &lt;li&gt;Start Arduino, then select &lt;strong&gt;File&lt;/strong&gt; &amp;gt; &lt;strong&gt;Preferences&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_21.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;File &amp;gt; Preferences&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;File &amp;gt; Preferences | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Under ‘Additional Board Manager URLs’, add this URL: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://dl.espressif.com/dl/package_esp32_index.json&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_22.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Add a board manager url&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Adding a board manager url | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Goto &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Board&lt;/strong&gt; &amp;gt; &lt;strong&gt;Boards Manager&lt;/strong&gt; and type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esp32&lt;/code&gt; on the search bar. You should find the esp32 package. Install version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0.2&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_23.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Tools &amp;gt; Board &amp;gt; Boards Manager&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Board Manager | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_24.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Board Manager ESP32 Package&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;ESP32 Package | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Goto &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Manage Libraries&lt;/strong&gt;. Then, search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PubSubClient&lt;/code&gt;, and install version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.7.0&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_25.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Tools &amp;gt; Manage Libraries&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Manage Libraries | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_26.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Install PubSubClient&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Install PubSubClient library | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Board&lt;/strong&gt; &amp;gt; &lt;em&gt;ESP32 Dev Module&lt;/em&gt;. Leave all new options to their default settings.
 &lt;img src=&quot;/images/20190622_27.jpg&quot; style=&quot;max-width: 500px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Tools &amp;gt; Board &amp;gt; ESP32 Dev Module&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on it to change the board | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;python&quot;&gt;Python&lt;/h2&gt;

&lt;p&gt;Run through all the installation steps for Python. If you are on Ubuntu, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install python python-serial&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;linking-up-esp32-to-aws-iot&quot;&gt;Linking up ESP32 to AWS IoT&lt;/h1&gt;
&lt;h2 id=&quot;step-uno&quot;&gt;Step Uno&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;IoT Core&lt;/strong&gt; (found under the section “Internet of Things”)
 &lt;img src=&quot;/images/20190622_1.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Services button on AWS Console&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on Services | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_2.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Core&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;IoT Core | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, goto &lt;strong&gt;Secure&lt;/strong&gt; &amp;gt; &lt;strong&gt;Policies&lt;/strong&gt;, and click on “Create a Policy” or “Create”, depending on which one is present.
 &lt;img src=&quot;/images/20190622_3.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;IoT Policy&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create IoT Policy | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_4.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Alternate IoT Policy&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;If you already have policies, use this button instead | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A wizard should appear. Name your policy through the &lt;em&gt;Name&lt;/em&gt; field, key in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot:*&lt;/code&gt; into the &lt;em&gt;Action&lt;/em&gt; field, key in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; under the &lt;em&gt;Resource ARN&lt;/em&gt; field, and finally, check the ‘Allow’ box under &lt;em&gt;Effect&lt;/em&gt;. Should you wish to restrict your policy more for higher security, or prevent other &lt;em&gt;authorized&lt;/em&gt; (yes, &lt;em&gt;authorized&lt;/em&gt;) users from using your topic, please refer to &lt;a href=&quot;https://docs.aws.amazon.com/iot/latest/developerguide/iot-policies.html&quot;&gt;this AWS Documentation&lt;/a&gt; to construct your own policy. After checking your fields, press &lt;strong&gt;Create&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_5.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Wizard options&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Values for the wizard | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, goto &lt;strong&gt;Manage&lt;/strong&gt; &amp;gt; &lt;strong&gt;Things&lt;/strong&gt;, and click on “Register a thing” or “Create” depending on which one is present.
 &lt;img src=&quot;/images/20190622_6.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create button&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click on Create | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_7.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Register a thing&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Or click on Register a Thing | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on “Create a single thing”.
 &lt;img src=&quot;/images/20190622_8.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Create a single thing&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Create a single thing | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Name your thing whatever you want, and click &lt;strong&gt;Next&lt;/strong&gt; at the bottom of the page.
 &lt;img src=&quot;/images/20190622_9.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Name and Create&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Name your thing, and press create | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;One-click certificate creation (recommended)&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_10.jpg&quot; style=&quot;max-width: 600px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;One click certificate creation&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Certificate Creation | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;After a while, the wizard should generate a certificate. Download the certificate, and the private key. Also, get the root CA, here is a &lt;a href=&quot;https://www.amazontrust.com/repository/AmazonRootCA1.pem&quot;&gt;direct link&lt;/a&gt; to it. Make sure to activate the certificate before clicking &lt;strong&gt;Attach a policy&lt;/strong&gt;.
 &lt;img src=&quot;/images/20190622_11.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Download certificate, private key, CA&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Download the cert, private key, CA cert, and activate before continuing. | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Find your policy in the search box, and select it. Then, click &lt;strong&gt;Register Thing&lt;/strong&gt;.
&lt;img src=&quot;/images/20190622_12.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Select then register thing&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Register thing | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click into the thing you have created.
&lt;img src=&quot;/images/20190622_14.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click into thing&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Click into the thing you created | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;On the sidebar, click on &lt;strong&gt;Interact&lt;/strong&gt;.
&lt;img src=&quot;/images/20190622_15.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Click on interact&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Caption&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Note down the HTTP Endpoint (both MQTT and HTTP share the same endpoint).
&lt;img src=&quot;/images/20190622_16.jpg&quot; style=&quot;max-width: 800px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Note this down&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Note down the endpoint | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Click the grey back arrow in the page and click on &lt;strong&gt;Test&lt;/strong&gt; in the sidebar. You should see the MQTT Client as shown below. Keep this window open, and proceed to Step Dos.
&lt;img src=&quot;/images/20190622_13.jpg&quot; style=&quot;max-width: 900px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;MQTT Client&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;MQTT Client on AWS IoT Console | Source: Me&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-dos&quot;&gt;Step Dos&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Open the Arduino IDE / Switch to the Arduino IDE.&lt;/li&gt;
  &lt;li&gt;Completely replace all the code in the IDE with code &lt;a href=&quot;https://gist.github.com/jameshi16/7f277bb8dfecf38a30aea0093f30477a&quot;&gt;from this gist&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Fill in the configuration options by editing the content within the double quotes (&quot;):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSID&lt;/code&gt;: The SSID of the access point to connect to.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password&lt;/code&gt;: The password of the access point to connect to.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_hostname&lt;/code&gt;: The hostname you noted down during Step Uno.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_sub_topic&lt;/code&gt;: The topic this device should subscribe to. For this tutorial, we’ll use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topic/hello&lt;/code&gt;, however, when following the tutorial with your friends, please have &lt;em&gt;unique&lt;/em&gt; topics.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_iot_pub_topic&lt;/code&gt;: The topic this device should publish to. For this tutorial, it’ll be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;another/topic/hello&lt;/code&gt;, however, when following the tutorial with your friends, please have &lt;em&gt;unique&lt;/em&gt; topics.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ca_certificate&lt;/code&gt;: Copy the contents of the CA certificate you downloaded (file should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AmazonRootCA1.pem&lt;/code&gt;) using any text editor like Notepad or Vim, and paste it into the textbox located below this list. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make into C++ String&lt;/code&gt;, and copy the contents of the textbox into the configuration option.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_certificate&lt;/code&gt;: Copy the contents of the certificate you downloaded (file should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-certificate.pem.crt&lt;/code&gt;) using any text editor like Notepad or Vim, and paste it into the textbox located below this list. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make into C++ String&lt;/code&gt;, and copy the contents of the textbox into the configuration option.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iot_privatekey&lt;/code&gt;: Copy the contents of the private key you downloaded (file should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*-private.pem.key&lt;/code&gt;) using any text editor like Notepad or Vim, and paste it into the textbox located below this list. Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make into C++ String&lt;/code&gt;, and copy the contents of the textbox into the configuration option.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;form action=&quot;javascript:void(0)&quot; onsubmit=&quot;magicTextTransformer()&quot; style=&quot;margin: 0 auto; max-width: 800px; width: 50%&quot;&gt;
     &lt;textarea id=&quot;transformee&quot; style=&quot;width: 100%; height: 100px&quot; /&gt;&lt;br /&gt;
      &lt;input type=&quot;submit&quot; value=&quot;Make into C++ String&quot; style=&quot;float: right;&quot; /&gt;
 &lt;/form&gt;

    &lt;script type=&quot;application/javascript&quot;&gt;
     function magicTextTransformer() {
         text = document.getElementById('transformee').value;
         document.getElementById('transformee').value = text.replace(/\n/g, '\\n');
     }
 &lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;Plug in your ESP32 now.&lt;/li&gt;
  &lt;li&gt;Select the port by going into &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Port&lt;/strong&gt; &amp;gt; COMX or /dev/ttyUSBX, where X is the port to your ESP32.&lt;/li&gt;
  &lt;li&gt;Click on Upload.&lt;/li&gt;
  &lt;li&gt;[Optional] Launch the serial console to see debugging infomration.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-tres&quot;&gt;Step Tres&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Go back to the window highlighted in the last step of Step Uno.&lt;/li&gt;
  &lt;li&gt;For this tutorial, fill in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;another/topic/echo&lt;/code&gt; in the &lt;em&gt;Subscription topic&lt;/em&gt; textbox, and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subscribe to topic&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_17.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Subscribe topic&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Subscribe to the topic | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;For this tutorial, fill in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;topic/hello&lt;/code&gt; in the &lt;em&gt;Publish&lt;/em&gt; textbox, and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish to topic&lt;/code&gt;.
 &lt;img src=&quot;/images/20190622_18.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Publish to topic&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Publish to the topic | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;If you have done everything correctly so far, you should see a new message popup below the publish block, which is echoed from the device. If you have have your serial console up, you can also see that the message has reached your ESP32.
 &lt;img src=&quot;/images/20190622_19.jpg&quot; style=&quot;max-width: 1000px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Recieved message from ESP32 echo&quot; /&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;An echo from the ESP32 on AWS IoT | Source: Me&lt;/p&gt;
    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/20190622_20.jpg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;What the ESP32 recieves&quot; /&gt;&lt;/p&gt;
    &lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Serial Console | Source: Me&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Clear the text field that contains the JSON, and try publishing either 1 or 0, and observe the ESP32 closely per published message.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;code-explanation&quot;&gt;Code explanation&lt;/h1&gt;

&lt;p&gt;The code contains the absolute (mostly) minimal code required to perform MQTT Pub/Sub with AWS IoT MQTT endpoints. Other than the MQTT client verifying the server’s identity, AWS also requires that all clients be authenticated with client certificates. Hence, the following lines:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCACert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ca_certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCertificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iot_certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPrivateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iot_privatekey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;are responsible for setting the required certificates for communication.&lt;/p&gt;

&lt;p&gt;Publishing is done like so:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aws_iot_pub_topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aws_iot_pub_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And subscribing is done like so:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aws_iot_sub_topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//subscribe to the topic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do note that for subscribing, you must provide a callback function with the signature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void callback(const char* topic, byte* payload, unsigned int length)&lt;/code&gt;. This callback will be called by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PubSubClient&lt;/code&gt; library whenever there is a new message from the subscribed topics.&lt;/p&gt;

&lt;p&gt;MQTT typically uses port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1883&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8883&lt;/code&gt;. AWS IoT only uses port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8883&lt;/code&gt;, because it uses MQTT over SSL (MQTTS), hence the line:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mqtt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aws_iot_hostname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8883&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Hope you enjoyed the tutorial. In part two of this two-parter tutorial, we will be adding a policy that will pipe whatever our ESP32 publishes to AWS IoT into DynamoDB. Until then,&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="aws" /><category term="aws" /><category term="iot" /><category term="mqtt" /><summary type="html">You read the title, let’s get started. For this tutorial, we will be using the Arduino IDE. This should be possible with ESP-IDF, too, because ESP-MQTT is included as part of the ESP-IDF.</summary></entry><entry><title type="html">Interview Experience - Part 2</title><link href="https://codingindex.xyz/2019/06/19/interview-experiences-part-2/" rel="alternate" type="text/html" title="Interview Experience - Part 2" /><published>2019-06-19T12:00:00+00:00</published><updated>2019-06-19T12:00:00+00:00</updated><id>https://codingindex.xyz/2019/06/19/interview-experiences-part-2</id><content type="html" xml:base="https://codingindex.xyz/2019/06/19/interview-experiences-part-2/">&lt;p&gt;&lt;a href=&quot;/2019/06/19/interview-experiences/&quot;&gt;Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well; I told you - I would have had quite an experience and be able to make a blog post today.&lt;/p&gt;

&lt;p&gt;I wanted to talk about one of the problems that was presented to me during the interview:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;How do you figure out if a linked list is incorrectly looping?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://www.geeksforgeeks.org/wp-content/uploads/2009/04/Linked-List-Loop.gif&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;A looped linked list&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;Incorrect Looped Link List | Source: &lt;a href=&quot;https://www.geeksforgeeks.org/detect-and-remove-loop-in-a-linked-list/&quot;&gt;geeksforgeeks.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are so many possible answers to this solution. I came up with a solution which involves using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt; object to store all the pointers, and check with the set to ensure that there are no duplicates. It’s a really bad algorithm, but I said it to answer the question. The interviewer’s (his) solution was more interesting, and is something that I haven’t encountered before - do keep in mind that I don’t indulge myself into algorithms in my diploma course and free time, because I’m more focused in actually trying to do something than to do it well.&lt;/p&gt;

&lt;p&gt;Anyway, his algorithm was like this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create two pointers, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;Make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; point at the same element;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; will advance two steps per iteration, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; will advance one step per iteration;&lt;/li&gt;
  &lt;li&gt;If any of the two pointers hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;, then the algorithm proves that there are no loops in the linked list;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; will eventually collide in the loop, if neither pointer has hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;, it signifies that there is a loop in the linked list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This blew my mind a little bit, and after hitting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geeksforgeeks.org&lt;/code&gt;, this 5 step proceedure I described was actually one part of the Flyod’s Cycle detection algorithm (Flyod’s Cycle detection algorithm is completed in the subsequent steps). What really displaced what little intellectual points I had left in me was the next part:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How do you resolve the incorrectly looping linked list?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;His algorithm was like this:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; back to the beginning of the linked list;&lt;/li&gt;
  &lt;li&gt;Let &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; go through the link list at the same speed, at one step per iteration;&lt;/li&gt;
  &lt;li&gt;Their first collision &lt;strong&gt;will be&lt;/strong&gt; the beginning of the loop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may ask: wait, why is Step 3 true?&lt;/p&gt;

&lt;p&gt;Let’s say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; travels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; number of nodes within the linked list. This menas that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; travelled &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2x&lt;/code&gt; number of nodes before it collides with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt;. What this also implies, is that if you were to let &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; travel another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; number of nodes, it will collide with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; again, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x + x = 2x&lt;/code&gt;, which is the same distance &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; has travelled. Now, think about the distances travelled by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt;: it needed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; number of nodes to collide with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; &lt;em&gt;from the start&lt;/em&gt; of the linked list, and, by travelling another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; number of nodes, it &lt;em&gt;collides with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; again&lt;/em&gt;. This implies that if I were to have another pointer, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr3&lt;/code&gt;, which travels at the same speed as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt;, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; starting at the collision position and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr3&lt;/code&gt; starting at the start, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr3&lt;/code&gt; will collide at the same collision point. Meaning: the first collision point between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr3&lt;/code&gt; will signify the problematic node. If we were to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; travel through the whole loop again, checking the next node pointed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr3&lt;/code&gt;, we can find the culprit causing the loop in the linked list, and route it to null.&lt;/p&gt;

&lt;p&gt;In the above chunk of text, you realize that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; is only used to prove that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr3&lt;/code&gt;’s first collision is the point where the loop begins. Hence, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr2&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ptr3&lt;/code&gt;, saving us one memory location.&lt;/p&gt;

&lt;p&gt;That’s was interesting ain’t it?&lt;/p&gt;

&lt;p&gt;One more thing I learned during the interview is the existance of a trie:
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/b/be/Trie_example.svg&quot; style=&quot;max-width: 400px; width: 100%; margin: 0 auto; display: block;&quot; alt=&quot;Trie tree&quot; /&gt;&lt;/p&gt;
&lt;p class=&quot;text-center text-gray lh-condensed-ultra f6&quot;&gt;A trie | Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which is helpful in search suggestions, especially if you have hundreds of thousands of such suggestions.&lt;/p&gt;

&lt;p&gt;Well, I’ll probably not get what I interviewed for; but that’s fine. The experience taught me how it’s like to be interviewed for my technical skills; and helped me come up with possible strategies to try before my next interview.&lt;/p&gt;

&lt;p&gt;Good luck for your own interviews, if they’re coming up!&lt;/p&gt;

&lt;p&gt;Happy coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="fluff" /><category term="interview" /><category term="job" /><category term="code" /><summary type="html">Part 1</summary></entry><entry><title type="html">Interview Experience</title><link href="https://codingindex.xyz/2019/06/19/interview-experiences/" rel="alternate" type="text/html" title="Interview Experience" /><published>2019-06-19T01:00:00+00:00</published><updated>2019-06-19T01:00:00+00:00</updated><id>https://codingindex.xyz/2019/06/19/interview-experiences</id><content type="html" xml:base="https://codingindex.xyz/2019/06/19/interview-experiences/">&lt;p&gt;Recently, I was interviewed for few internships in the same company. It so happened that these interviews are technically-inclined interviews, which menat whiteboard programming.&lt;/p&gt;

&lt;p&gt;I was a little excited to do that at first, but I was not prepared to get spoonfed the answer as soon as I took too long to think. For context, my problem statement was this: “Find the next number, greater than the current number, for any number on a Binary Search Tree.”&lt;/p&gt;

&lt;p&gt;Looking at the problem, I decided that I could solve it with a simple traversal-based algorithm, which caused my interviewer to raise his eyebrow, questioning my programming experience I have developed over the years. Turns out, that was not the solution he had in mind; he thought of a solution which involved &lt;em&gt;both&lt;/em&gt; Binary Search Tree and Binary Search (a wonder why they share similar names, huh?).&lt;/p&gt;

&lt;p&gt;Back then, I didn’t really push to let my solution through, because he was the interviewer, and he dictated the interview room. Hence, when I took too long to solve the problem, he started to guide me by asking me to traverse the tree, insert the elements into a list, then use binary search, then add one to the pointer. Once I understood what he was doing, he asked me to only implement a simple binary search algorithm. However, when I returned home, I quickly wrote down his solution and compiled it; then, I wrote down what I would have wrote on the whiteboard if he didn’t stop me, and it turns out, my solution would work as well. In fact, mine will have better time &lt;strong&gt;and&lt;/strong&gt; space complexity, because his solution involves two algorithms: Binary Search Tree traversal, and Binary Search, while mine only does Binary Search Tree traversal. His solution requires an extra list, while mine doesn’t, hence the claim for a better space complexity. However, in terms of the Big-O notation, we would (annoyingly) have the same complexity for both time and space. The full code for the interviewer and myself can be found &lt;a href=&quot;https://gist.github.com/jameshi16/8b2a6483ae2d304070fd35f5b4004ad1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Problem statement: Find the next number, greater than the current number, for any number on a Binary Search Tree&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the purposs of this blog post, I will trim away all the excess code. Have a look at the following snippet:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearchNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//next element cannot exist&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//get middle everytime&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//can't even find the element&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This was the interviewer’s answer to the problem statement. To use this snippet, you will need to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traverse(parent_node)&lt;/code&gt;, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binarySearchNext(sorted, 8, element)&lt;/code&gt;. We are using in-order traversal, and you can see that during the traversal, values get added into an array, making a sorted array. A binary search is then performed on the array, and when the element is found, we add one to the iterator, returning us the next number. As a reminder, a traversal in a Binary Search Tree has the time complexity of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;, and Binary Search has the time complexity of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O( log(n) )&lt;/code&gt;. In terms of space complexity, the whole algorithm takes up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that, let’s have a look at my possible answer:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//answer will be here &lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;element_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findNextElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To use this snippet, you need to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;findNextElement(parent_node, element)&lt;/code&gt;. If you look closely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;findNextElement&lt;/code&gt; is simply a wrapper function around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traverse&lt;/code&gt;, and tries to understand the output of the algorithm by inspecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;element_found&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextElementNode&lt;/code&gt;. Hence, the bulk of the work is done on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traverse&lt;/code&gt; function. The difference between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traverse&lt;/code&gt; function in my snippet, versus the snippet representing the interviewer’s answer, is that my traverse has a few extra lines of code, namely:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element_found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;nextElementNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This small block of code will assign the node to itself whenever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;element_found&lt;/code&gt; is true, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextElementNode&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullptr&lt;/code&gt;. This is strategically placed &lt;em&gt;after&lt;/em&gt; traversing the left side of the node and &lt;em&gt;before&lt;/em&gt; checking the current node with the supplied value, so that if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; is the last traversed element in the left side of the tree, then the recursive function will return all the way up to the parent node, making the parent node the next number to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, this method only involves traversing, which hence makes the time complexity of the algorithm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; only. In terms of space complexity, my solution is also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some of the sharper ones among you realized something: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;? Wait, doesn’t that make linear search on the constructing list the same space-time complexity as both of these overly complicated algorithms?&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;Yes it does.&lt;/p&gt;

&lt;p&gt;We don’t do that here.&lt;/p&gt;

&lt;p&gt;Although, you are right. A simple linear search, looking for the minimum of all the greater elements than the element we are searching for would have sufficed, and be as equally efficient.&lt;/p&gt;

&lt;p&gt;Once again, the snippet is at this link: &lt;a href=&quot;https://gist.github.com/jameshi16/8b2a6483ae2d304070fd35f5b4004ad1&quot;&gt;https://gist.github.com/jameshi16/8b2a6483ae2d304070fd35f5b4004ad1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do try and correct me if I’m wrong on any part of this blog post, because, I have no idea what I’m actually doing. All I know is that my algorithm is a strong contender to the algorithm he suggested.&lt;/p&gt;

&lt;p&gt;I have another interview coming up soon, so you can probably expect a blog post from that too :new_moon_with_face:.&lt;/p&gt;

&lt;p&gt;Until then:&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;

&lt;p&gt;P.S. &lt;a href=&quot;/2019/06/19/interview-experiences-part-2/&quot;&gt;Part 2&lt;/a&gt;&lt;/p&gt;</content><author><name>James</name></author><category term="fluff" /><category term="interview" /><category term="code" /><summary type="html">Recently, I was interviewed for few internships in the same company. It so happened that these interviews are technically-inclined interviews, which menat whiteboard programming.</summary></entry><entry><title type="html">:book: Encrypted Page</title><link href="https://codingindex.xyz/2019/06/14/encrypted-page/" rel="alternate" type="text/html" title=":book: Encrypted Page" /><published>2019-06-14T14:00:00+00:00</published><updated>2019-06-14T14:00:00+00:00</updated><id>https://codingindex.xyz/2019/06/14/encrypted-page</id><content type="html" xml:base="https://codingindex.xyz/2019/06/14/encrypted-page/">&lt;p&gt;:coffee: Hey! I made a &lt;a href=&quot;https://github.com/jameshi16/EncryptedPage&quot;&gt;thing&lt;/a&gt;, do check it out! The project’s called EncryptedPage, and you can kinda guess what it does. Let me walk you through why I made it.&lt;/p&gt;

&lt;h1 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h1&gt;

&lt;p&gt;A three-hour project that I created to see if it is possible to perform client-side decryption on encrypted content. This can not only be useful for paywalls (I’m sorry), but also for private blog posts, for none other than my blog! It is also a crucial component for the major project I am working on, which I still have to keep a secret because it is still being worked on.&lt;/p&gt;

&lt;h1 id=&quot;what-why-password-blog-posts&quot;&gt;What??? Why password blog posts?&lt;/h1&gt;

&lt;p&gt;Hey, hey. Hear me out now. Sometimes, you just need to have blog posts private to the general public; very sensitive information, such as progress on secret projects, personal life updates, and other things that I would prefer to keep to myself or my employers. If you know me well, I don’t really have social media, other than &lt;a href=&quot;https://twitter.com/jameshi16&quot;&gt;Twitter&lt;/a&gt;, which means I need to have a method to “set posts to private”, while still maintaining public posts. As I do not trust third parties with my private posts, the simplest method is to create my own means to do so.&lt;/p&gt;

&lt;h1 id=&quot;can-it-do-images&quot;&gt;Can it do images?&lt;/h1&gt;

&lt;p&gt;Encryted Pages, being made in 3 hours, had a clear focus of encrypting HTML pages. Images that can be converted to base 64 can be inserted into the HTML, and then encrypted. The same goes for JavaScript and CSS code. Unfortunately, there are no current plans to make this easier, mainly because by creating Encrypted Pages, I have already achieved what I need to do. I may change my mind and add the functionality to encrypt other resources and reference them from many HTML pages, but for now, nope.&lt;/p&gt;

&lt;h1 id=&quot;tell-us-more-about-the-secret-project-already&quot;&gt;Tell us more about the secret project already!&lt;/h1&gt;

&lt;p&gt;:wink:&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope you find this project at least semi-interesting. Maybe instead of me, you could be the one who extends the functionality! If you are interested, go over to &lt;a href=&quot;https://github.com/jameshi16/EncryptedPage&quot;&gt;the repository&lt;/a&gt;, and contribute!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="projects" /><category term="project" /><category term="js" /><category term="golang" /><summary type="html">:coffee: Hey! I made a thing, do check it out! The project’s called EncryptedPage, and you can kinda guess what it does. Let me walk you through why I made it.</summary></entry><entry><title type="html">It’s been a while. What am I up to?</title><link href="https://codingindex.xyz/2019/05/31/its-been-a-while-what-am-i-doing/" rel="alternate" type="text/html" title="It’s been a while. What am I up to?" /><published>2019-05-31T15:59:59+00:00</published><updated>2019-05-31T15:59:59+00:00</updated><id>https://codingindex.xyz/2019/05/31/its-been-a-while-what-am-i-doing</id><content type="html" xml:base="https://codingindex.xyz/2019/05/31/its-been-a-while-what-am-i-doing/">&lt;p&gt;I am most definitely not rushing this blog post knowing that my last post was 1 month ago, and the month of June is about to hit. That is most definitely not the case.&lt;/p&gt;

&lt;p&gt;I also most definitely did not forget to save my blog post, and carelessly unplugged my battery which caused me to lose my work. That most definitely did not happen.&lt;/p&gt;

&lt;p&gt;Well then, it has been a month, so I am relatively compelled to post a status update before the end of the month to &lt;del&gt;get my money’s worth for the domain name I bought specifically for this blog&lt;/del&gt;. Let’s go through what I’ve learnt, what projects I plan to do, and future blog posts planned for June.&lt;/p&gt;

&lt;h1 id=&quot;what-ive-learnt&quot;&gt;What I’ve Learnt&lt;/h1&gt;

&lt;p&gt;This month was packed full of information for me to absorb, albiet some of them are irrelevant to the current era of computing. Here is a list of (useful) things I have learned this month:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Linear Regression&lt;/li&gt;
  &lt;li&gt;Logistic Regression&lt;/li&gt;
  &lt;li&gt;k-means &amp;amp; k-nn&lt;/li&gt;
  &lt;li&gt;Intel 8088 Assembly&lt;/li&gt;
  &lt;li&gt;PC Architecture&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And many more which I find too difficult to stimulate my lazy brain to recall. Hence, I’ll leave this list in its inexhaustive state to never see again.&lt;/p&gt;

&lt;h1 id=&quot;projects-i-plan-to-do&quot;&gt;Projects I Plan To Do&lt;/h1&gt;

&lt;p&gt;I’m in the midst of planning for a major project that I cannot reveal until completed. This is something that I’m excited about, so you should be baselessly excited too.&lt;/p&gt;

&lt;p&gt;Other than that, there are many, many projects upcoming that I have to plan and prototype for academic purposes, which I will open-source when I complete them. Here’s to hoping that I’ll come up with meaningful projects :beer:.&lt;/p&gt;

&lt;h1 id=&quot;future-blog-posts&quot;&gt;Future Blog Posts&lt;/h1&gt;

&lt;p&gt;I’ve watched many, many anime as a coping mechanism to my bottomless depression, so I’ll be making a review for all of them. Other upcoming blog posts include connecting an ESP32 to AWS, and Ethereum Smart Contracts, so you can look forward to that if weaboo land is not your thing.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’ve typed this entire blog post in 5 minutes, with no proofreading, while watching anime reviews by &lt;a href=&quot;https://www.youtube.com/channel/UC7dF9qfBMXrSlaaFFDvV_Yg&quot;&gt;Gigguk&lt;/a&gt;, so you can imagine the mental gymnastics I’m trying to perform to get this done, so I’m not liable for any grammatical mistakes above! Even though this is my blog!&lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;/p&gt;

&lt;p&gt;CodingIndex&lt;/p&gt;</content><author><name>James</name></author><category term="fluff" /><summary type="html">I am most definitely not rushing this blog post knowing that my last post was 1 month ago, and the month of June is about to hit. That is most definitely not the case.</summary></entry></feed>